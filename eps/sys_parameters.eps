%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: sys_parameters.pdf
%%Creator: Adobe Acrobat 11.0.3
%%For: wufish
%%CreationDate: 2014/12/10, ¤U¤È 03:59:33
%%BoundingBox: 0 0 406 299
%%HiResBoundingBox: 0 0 405.3809 298.0350
%%CropBox: 0 0 405.3809 298.0350
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 948 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-12-10T15:49:04+08:00"
   xmp:CreateDate="2014-12-10T15:49:04+08:00"
   xmp:MetadataDate="2014-12-10T15:49:04+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 Word ç"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:19b4aeba-8f1c-4f75-a2a6-105185c76268"
   xmpMM:InstanceID="uuid:49016da1-5845-41cb-b16c-028b48831f52"
   pdf:Producer="Adobe PDF Library 11.0">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>bunlab</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -298.035 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 298.035 li
405.381 298.035 li
405.381 0 li
cp
clp
false sop
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H)
%%Title: (MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -199 1000 801} def
/FontInfo 4 dict dup begin
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 22134 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
1988 <001C60D8A8C9B5EE310380D6A42D8B048AA74BD48BA12083639285FA60
5A5D5D6D0A353DE024B391107B5868E5779C15E107FD66C2E064E0D64EE09F19
10D6EE3B07718C1C02AF32EFB15784A256773C7E7134F45B73E6B24801E75BE3
B0D2FB8992C1AAD48A44A6C872258C6D87B23D5592BD0D6AFC38DC8E4DD1B114
E06C141070769B7EE863C68D2E804AD2CF7D7BECC31C3D90F956A026C70BA624
3EDECACE95EA7F6DE24C8EED7BAC7FEC165298A31982027A56F213CB9F59646B
EA6838477D612C6E31DA9230B619F2FE7A5124C48830F5A5A92966A188574210
BE68F730AED0882B2948601EDB2ACC4E90835B0DFA0D138C95E831894BDC2D00
D51AB7FED28DA0ED54C1A7C762242CB58F15AC45E30A4F3102C91AA74662813E
13FCBE9BC8B1D093A39C7BE9173C4B17C4043669801997B72E93EF4DD2B7AD2E
08C0C341CDB27D48C46BD26A9EF7E86A8557E081824A6DC2F28948C16956DAC7
A32761C1D72C8BECD6BB1A7633E5092BEA2C237D17ACDEE34D12F4D912DD6617
E30AA074AE7740C38D376479DB9F574EFD1C38DF4DC091488A746C85B5D4CB37
07A6AC051B454E7BF779E4E6C1CC1EDA701D0AC4E9FDD3020A3CE55D9D7618D9
55AA6EF973717511F57CE252ACB0EC4F7BF699E53E4C7451060E3B1FA5E78634
6EA6BC32E4A1F0530E62B21F98332F8500CF20127BCD447E18DF5F91F38149C9
5F3B0BD61099C358D7F4DF1E17B91C96B6B1A9C6849CDEDACCC18CE00EA04CD6
B646FD3D4FC697C89676240A5C595ACD584818B42801F6B395F941ECC5AF72E5
213B6359F5B3C8F400786EAEDA07478CCE199DE91805C05E40DF2D4AB9F0AD23
3818C36F4D59595189171B5164561C8BEBC9325D5E5DA79351E86EE5F1DF3156
1624E45A873E732A0044AE74> |
506 <001C60D8A8C9B5EE31026536C8C2CF93AF1D32A3147B580FED7F9C98732
7A1BAAEEAECBD3AB7C0D8B06603512AEBCA5DDF7D20DF4FACF7AAFC4FDF6F11C
F59306A6CDE6700F80292131F3DE7D3425029CEE66DECC070B22FFBA8475CDE7
4938B2339820687CEC435E5D0120DF7D8AE57D2737E705CC3BE2361ABE79C374
159698C0A413A> |
1587 <001C60D8A8C9B5EE3102426C1FC2B193ED4A6E5B23AC1ACE0B4FCBE84E
2F2B3D4425722FA49DDF22C3B9F92150C22A0A46ED99B0A3D85FCFDB941E4998
CA333674DC0EDFA882DCB5173EDC7F403C8D0A29C9D8F3318D179169103C905D
93BDD59CE30212BBBCC7EDA1FDC01F089A106C26EF0FCB2E626FB4742CC742B9
99C2E90970EBB71537F8F1D84BBE3309E5F934E6CF7009548E6732CF850714F3
F17630CE05C12ABF5BF590723F6820D68116335B666C805BCAF78065EF369FF8
47F9D5D0A49D0FD2929D61D1DB45A1611C5A486301B5CA50BE8E775A024B99C0
BE523B3369A283C8AD6DEEE8A81E28BE18848519633FAA651AB9B12867C758C5
E0FD10C214DA326AA0F05EB8506DB017A37DEAEE187F0558D0625BBE1E7A1DCB
F12D2AABCB3EE3B03F9BF1FE94DBBD36749E70730D1912475C94A6099D15C13C
53FFD4E9FBDD556D40AAFB5A2B6FE0ACEDCF8B210B5572900DD23FAAF3B7B257
F28EBE06D9BBBA2FE1E19083BFC6A64B6CE44FB650A74255A5BD75C4E3CB49B0
A10190CDDE3CC7418DC7B61A3CCBD6760DAD52B08FEB88D96CF6AF1C56EFFA4D
51D7977BA4B570A4BE0B3B9A9D36AFA955EC7127E2F98E041880C60ADD9C2556
B31C15725E922C01CF6E85D245035F65B2B0C8D814CC6AF4F284436BF998D28C
FB820FFA0DA670C4FADCABFA3871CCA64C8C49C429C5DF472E72BC480DA2E0C0
C931D93335C3F000C9A5E2D534ED61939971FF8A91298F888B885CAA10E3DF13
5AF5ED2901286A384F0F360222DA89F021A06C34AEBE520789EE440431D422A8
BE472001F99C7571E56F6D155AD2D4B4AA2A14B54ED561CC49CC78836E21BECA
89BE8C0238056F19F88EB3FC6562A4F12D534363B38AC0AAD28F005BD01576C0
F2193F0CD9DDE54352C31951911675061C0A6C6C5C5D452EF44A1C70E6D62E45
ADB7FF75D499C2B7E282426830D910995790B3C7A2A99C87E5EF> |
3213 <001C60D8A8C9B5EE311F7A2EC4A168E759192D71D3BD1F3971B7A00F1C
E2D707291BE5FD9E7454905FA3EFACEE472C77D2136827F9B36D775C956A1C01
1F7875C51C21586393762431EA3184EC174FD2DFC0EC5FE0D1763D9B99EA8ADB
A7F2E5AC93F0E3C90601D9E88F26C238C6FF874D45F932913867911E4E990085
38F2F61CA765F833B31DAA894AB60C8A76C1018C7CD9E316BA776E0532351263
E8A65DDF461ADD54DC98335C82CDFE3F71D5F7A6F59E5F29B868F7C51661D274
14E2570D860E6A94BD5BFCB3BD6B3BC34C30C0B2E1B4DC2357681779A6004076
093AEDD97BF0CA1D3353F4ED183CD48500494E9AEEF5E92B58053EB57B58D7DF
9243DF302B9BB35E754A457448A51E66BA3660C21D824A5C35B7031BF90674AE
C40CDE74AB2B84F8A6E567E80992BDD1932A9E5FE1455A132B2B9D833ECE4B83
02CBC36A572D16E818881988E1C78FFBDC9F57CF738AC9AC6B410B48BF1A4E36
13FB7C5B8D8B0C38F10CD53F15B7A3E4FDB8466CD7E9E22429013B54A0743613
AF651610E6FA33EF289B8FDCD02C6D44D374E6C2A397349FF637C7610CBDC37E
4F5F710516740E27080F0795FF4E34E1AB2031B79224BB8B4D98668A34A4619A
4FBEBD8AEE3736F95CB681B6ABB865CF7B616922D586EB6F93C51507066C9572
95CB7B119940288AAD363CCC9786494861C5BD7AA4A4EB813E7D5E61AC114EFB
40357F1C4DFB57C422CB4617163FD6D899620D61035FE66402F1402878C87EAA
E3B00E415DCEB50615B69A8C354BC763334D9B5B9BA9F579B466DD5CA1259DDC
ACDBA36973B46C370C659908E7CB62E8EA0CC852AA587B3F65D3E27E7D90B620
9E24321AE58D3A6590DC0CCBE0C109E8FCFB9D08C8B1FA7BF70DE2DCA7A18EDB
C1FE77E67C31FB607BD52BFB3036450F252F9A185B1F111C6C93A1082A6AD168
86F7F48FAC20734F5A9ED513A951309FB3D24C8EAEEF4A1807A490176FA2B7B4
56F4C6CBF5EC8115CE98503D4C8753C9CA67B9B6D55920DB347018E0D70EC0D9
23233BBC93B1B9B281B1355E3DE2A6B25905903FB479B32A0203441C78241A5E
D3FFD872E5A8DF917BDFF4F9EBCB1BA205014DDD091CF984E280D2AC668258F2
27A5FEFA6C724B497AB2BFA7346FAD3EEDBB813C6FBD2F22938AF652D16894BB
52A6E766C217B58C7EEBFBEBD3888CCD92CAC4C016297EF0420794E20B1A332C
8D445B64656063B09422C1D9050927EFC4894EE83F0A5785BF555B749C1457AE
6ED3FC9A65A892228B64F7FFB90F6A1F81F9DCCBCD7F7461EF7711AE02A9593C
C9C9E8D926736D3C265BF102C8FC3AF77E532F53D7FABCDAF5D0D167E104B797
CEBC1ACD9E28AE8AA422F616AC59DF0E0AB7C17BC8D9DB0074F4FE1C4C31FB55
7CA3154D3292E7E2F0> |
2902 <001C60D8A8C9B5EE31024EB5069B6A899B591E3524DBA56C6B89C8B9D3
DF88E4990EBDEA98E6D47CC4ABC1819E6ABC4320B5CAA3840C287598237E8B97
C77FD7A88B00CD51CC994D9A80DCC8F3EE4B990280F3C3C7010EA064748FF323
5EDB2094FFD2F88D9EFB84AFDC3E07C0271770C0A638A20C6016F2C85302E463
AB56E52B2F01AEE124DF2257A502FB10326918831E20BCD8165871B8CA5CFFBB
9F7DFE152E942B34266CC604AC89856F29BA75FC1C040E89F87C9CA156F57F4E
127F5DF84CA13B6945DA404ECCA06172C579AD07D2B23CA15532E4EBFE37CE80
AC659CA2137E08412ECB59610E4AA8F23BE705F0E1C79C4307517B2F02A8A678
CA7783D4EE5E42136160827EF370101A3176B8083AF01321127DBD3EEE2F7AFF
16715B4F658B6CF39AD2A9F69D812BBEDA322F7EF8D072D962D4CDAF1D175C80
6725A238FF8DE06B71359FA33E4749D267A0155B1EA157630E5A57E3317016A6
99E90C5922187F59A1430B57B6611DEDF35F89230D3D0179F8F77E9A89445D71
3797E15C075C81DEA3560184BF70B3BBACDDBA6E2A6A8EBE9597B3D19FC6CEE6
AC254E784E5A8ED453365BFE931E6D8C8AE62F0E86C322BAE2002E6B85FA5AE1
BC286DCEB1C1AA44481D06509D6B5C981605A687128FC896DD8FDD48567E98DE
312CD89A94FF6DD2D4B52BD48022E4766CC8763C81A82E53278F33E0EA8F1A6D
413BB65660BA92EF6422A57B727465B118F6593CBDD3C38F5AC21F7589A8ECA8
E270CCE7E5781E53D8A9FB3ACCDDF3A1F594BCD6427B9E132F675A28110F9D96
17B3A1E28E776F0EA764D7B2D857FDD7EF2CC2C0BD701510D4823A9BEAC7BB86
1CBF9237E69462805BD5DD47824400AB9B9F770F94F8651C04A77428AE37F1D7
8912049C2308988EE43F68F1D77B6FD6EF3E12B9524F7805107239CDC371E853
F61A7FA51C14DDB762C34D61F0BE88F7F2EFF04F3E862939E2CE80ED97EE735E
1CA7803B3879C16DE821A70D5165FEDB6C795E696D776C74AD1E9B082E19E716
31300AE6D8B7765CE6E9241A2EBB43023EC931D48329AADBF761963EBA6EAA9F
86CAB6EF0EB2C8A01DFAB2EAFA633C21DDFCAE1007B9BAFED156D213E524156A
57022055B4C9FC48D9D75E58823F396C87B9901EAC8049E39EEB6E5C728DF656
B0D916201DB13B3C6FD3001F25A7DA5438862546BAEB01EAA8822615E6805576
FA163B5C591A89019593299B968D165B3C1FBD30697319B5794D8FA6329003BE
70AFBCB6096407AFC2CAF5D5DB33A1FF4F607E1F2788792E4DF7D7E4C030FAFA
9731D95D307EBC23896C73ADEC5BE3C08554C6916E237685F2208E5CB145C748
ED272B9C3BB123F2CF37A675EDF33F742935E26A10EB91> |
4775 <001C60D8A8C9B5EE31021C063D6AC2FE948715F4EB38AE559BEDAF8814
B9435F652851E75DAE160B3AAE4B223A3E844C01F9BA951A0A985974093FD09F
D639E5ACE6A31AE7371FB429550A7D4A8C9A7CB5D08C0E00F899B725D8535A31
D4D0651172EC1CA58EA30B651F24D88E221D3C01D83057A5CD9899843270B0D0
52810ED0A93D05C0099957714241614035FF58AD58B1E9180BA276368CB88648
2C7457B74EAFCE8DFEA5254D1566714595B25568A8CA0828ABBDC2192961EBEA
4CDD2E83F5F6488BC4212ACFFD6D204C40CDFE9AA98148AE9D24B753F4A1235E
62A3F2C320ACE5723C719824EEEF52F0109E0AAE26FB7B701FA4397C62A382E7
4D2F82BA2DA77F0C7B0FA710074ACCDCDECBB33E54EED091FA5295936BF5E757
1DACB463494D8029175A811611D1B835322F5844F7656763B56BD8A94ED13F7A
86CD864B1C9F5FF76F71F0CF3D002F3003C9C5D8FE449FDC925C748F8674C383
9348C26E0B71A5E6ED09A97F53F60DE9593043B81173AE493554C612FEF6FA4A
EDDBD6090377316C374F48C58D2D57EE4767CD308019D3F18CD76C1992F00BA3
F10134A2F2E890301F66CF6ECA7A8C0F66CECA33B92F220EAE858CE28CB3A60D
16FCA65FA50A06C51E09CB5B4857B0C6687D2F8E4EAD432AEA39575DDFDC94DA
7185272413835AEA23A84C240A503652EBE30152982B4502A3C6D887481DF6B4
286A41E702CACA10A9D2DE5B3368BC10A164E1FF844CE10328ABC7A66CED6CD2
B2AEA4929F115C18AB43AF49CDA02F9BF13F8EFE89BF8AA510CE9729032D6BFF
93C2C0155DFBEE3DE0CDEE16A8D652A40B79ED378192BFEE72CF1358C50DAD5B
AE4EB054A2DA11ED9BE435400DFBD120D2D8A9C1DAB3EACB99885FB95590F001
78989DDB4B41FD44C2F0E5A74AA24C6E4ABEC0F21106637F1E1E28603A0197DC
45656330B021DF3AA4FEF40028793263BD1DBDA7482AFAEA83181E6391C68773
B9A91D92ED5A415E15F47AD940242700F88485FD68F037C6C40E17C23705D1E0
08E8ED7CC5E5455C946DA9A42F0BAE2A764C957CC5C15ED1F8B94335EDE441F2
10642F4618F8A731F8AD65CE95576F6C2837CBFA4F04DFB2333A854E1DB41A89
B4A3B2A1D479D699A0C67FF2B6E1F5FE8352F5DA4BE5DAA8E1EC868CCD37F109
2731AD0B2490BCFF0D0BBDE312C74B875A603DC57158DDF460601132538FB0C2
683694986EE63FB49FD94F11052A0B9890FA1957F61DEB61BB6034D328018E83
B93F78F79D1B389A3948659B78862FD9F9D338658499D750C15F5D6A113D444D
9D269F5E3019690CDF5447480ED948B0579FCC12BDD8CFCC0617EE0459A3800F
B3D430361C958B5B5C64CA8C9CE4B0BF3967C9970A0FCA26F0AB8E4790DF203B
51257386A23B2114AC1C20D368C9293A5D84A1114F2D5355638F7A12F78DB96C
EFFF257E7BB87850A63FEC6376DA4955E04870CBCA122B5D3F08C39B481AB463
75FCB21BB5C74C8638C526C64AC4BA940953B547BAD87A9270DF8DBCCB9DCB3B
BE79866158760C373237B742351CAABE88B196ADDF0DD84903FA021592AFCDA2
EFDCC1172B2E442492CAC33FEB9FE71489BC12E5AD5BD7138D897A4B9306CBBC
86D0A64D6AB20FB2147440474849D08EDCB4C1FBDA47D801FD95FC79204DC13D
30179F4D6C1F3F2900DDAB8D9D1BC290A1D680211E3BDB62E633B4997B7C0BBF
3EC47C2DA1D05A4BB9AE407326E2AA2F75D3FCC9A9D5286AA653D7786818B3D1
3B0950AECBB2F780CE73E82FCBD283C5DDEFB65E9CD054BAE57CA87FFE4D300C
E9698310B2BC97431CC29913C133A1E712B97A48F991886036937970F0> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H-Identity-H /Identity-H 0 [/MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
151.473 -26.04 mo
(\007\304)sh
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 52 /four put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED949
85BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375
C6ADD098717CA70F621> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D
6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MSWTBD+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/MSWTBD+TimesNewRomanPSMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 2{/.notdef}rp /four 203{/.notdef}rp]
MSWTBD+TimesNewRomanPSMT nf
MSWTBD+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
166.473 -26.04 mo
(4.1)sh
/MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
181.473 -26.04 mo
(\001\372\0063\014\215\013V\022\247\007\304)sh
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
def
/FontBBox {-476 -194 1214 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/space <1C60D8A8C9B888C146> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MSWTBE+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
-5.12711 -3.12006 mo
( )sh
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Calibri-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 68 /D put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/FontBBox {-493 -194 1239 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F1
19478AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D1904
2FB8B7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28A
EC2A0702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D
929B025DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF4
3A5FA51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D
8D270BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FF
E381E622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A
6E83C18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF1
9D085C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EA
E508CE290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF159
9689FA1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB39
8CE8AC4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787
220FBA75DA1E45C945> |-
/space <1C60D8A8C9B888C146> |-
/D <1C60D8A8C9B66B395FA10874C49903C5BA5D8A11648D789575D5BDD1F662
23F5068AFB07B7D4A6F562CA3B74B13B5EA917B7C1AD358BE09BEB4E72893350
C36BDE7853C8F59B15C9C7D4DF300E1CF389834D73F73BEAFCCB36018862705A
4AA45264E1F40B031B51D9E2D256C5A222096B45098A61598A49246878A44E20
B4E2650D94107FDA3430A83D1D935A730ADC0CB97EA2F81591EE89713F0A5E7D
91B0AB952FB896B549D9AF25BF5D9521D347CC> |-
/P <1C60D8A8C9B7876E7B6051918B0CB59DE076B64C8C49A5DA02FCDF071BDF
FAD7C92735E6137051509AC8CB684E8479BF8D6E587DBA864F50A4E9968B9001
01533A81B7315E5635E910F633B3C8F74196CCCC1B0507109F1B1BB9A29E7D81
2E4438818B1C7D155075E4CD25D535EFA79BAE24E64D32CD5F9BC09B4F74C278
A3C1BD035A40B815B3035706B0AD5FD304DCB7953E153A1AFAA729815057B9B9
18248D356F4E0C23746C525E6E30C1CDD3880B36A24277890D67A7BAA12BFDE8
5E896F0F4E0CFD215BEC86CD1A1AAEDF5027F5D656DD8EEF175D17890242268F
CE601EE1354322C31F441CD975> |-
/a <1C60D8A8C9B7AD0A34D5A33DA54D708C09070E3263DB3F8B204742934F45
464C864E5219DC64C17C21334728C70A28136E97F8B50DED54E9169E494DCFFB
E08054CD1ABEDFE9442047B18ABC511F07776D5525C7536F54A7020A4D066604
44EA4587557797F3D30E946423D7B549AB2AE4911FA9B4137E2A2722357A506A
6A05F91A214894E28FEC6B492CDF90F6872AAE0C40180F5DD11FF249C62B7437
E3A71BA232F3D2872FD555E1C9AC4E7F4B48457EB6186F604DC3EE6103F0F881
A966A4A53DB93C1C7AD28044A61CF0FCE7D40BA68015641BB746FB7DDE0D2F13
5B3E72C27DE147EB6127162600CEE2FE996BF71B8B39FDE57DFC392DDA09C4BF
60254D74CA373499967C5100501D06A31B9AF30F8F868E5E3B054E309214BEED
4F999B3B55712B0FD812D6575581ED3C4A080C3FC359594852C6FA23B784C4DB
4B1AC424E90B4505E356F1C575F8C57FE52642AA261D219ED5B82760638581CA
02> |-
/c <1C60D8A8C9B719BD263F1C66E176AB1A9B9A5A3A8367D7DDD55624575D83
30769E89EDE2B210CAC0C33466D934E07EE8C5D0A40F156D15CC57AF923B2505
73D6A3F9259B0A3431793F366C2A4E1951E4FEDD7CFAEAA854A72A9831B3A189
34A1E3BA67B1825DD68D168A926FEDC2EA7260DFA821668535829AE8FBDD7974
81380CC39C4AF2C6ECADB05FF3DA8E4A111EB4A3E3B59FFB126A3A37C4B5A113
868987F4611BA41E12178776F476582469050F58D9C2434F2F75015CEE522ED8
E12899B67502531E8AB98B42F667383D35B65B55576BE7A1323FDACE70DEAB60
FF6C739F5C1FBD6BC404A862F611E798DE5F7D20626F50E2F0A84DB6262D7AA2
98F592743052BB8FB5A0340AD9FF86B3B347A6731F17F7E35046670F71F40967
A7BFAB9BA0179B380201FC6F3EA37CFED86A9E1255880201A87ECC18F17716BB
9085A306CE> |-
/e <1C60D8A8C9B7A4C86C545A4AC8A7D7F6C345E834CA1213E882E926387794
826A205EEEE689D37E8FC5A261291E47A8EB37515D6AFF3E8D4C2927EEA10BDE
E7B9C51B7C7E29EC21F969487478C80B6DD492C8CB06797735DBFAA0767835E1
6CF60557FF99669574049AC02AF815FE3A71EC95AE08115F25C3E55D5B1FD10C
A1E741534F0E60416081D7FA16D9DFEF57FF91FD82FC7BA4FB9689D718D9A71D
ED1EF9DCA51AF0BBC79B40093EF91CBC3D8C48A3FDFEA41B5047A65EAFDD5AF1
021F9C948AAB35D583226126C585E079DEB6D479075845CECA8ED7ED10944C11
C924501DD381B71E2F7690C30AF54ADDDF92DD4099EA219A54E3CF84E276FA78
71C8A6ED23473DBBAA6EDA7BEF929816C1760D14417F454980C243ACB7FEEE42
2DBAD62FF97870FD2250B1790169B64F76> |-
/i <1C60D8A8C9B874A685BEE7073E3D9BEB2350BB486AC62AB5FFB3F3055796
FFA7201F6E4CDF32059564C619C9CC449E2E13D3438C6F3A00A8C33DF67EED72
B4A703E19615397FBD65B8F41AB93A2D076C7948B4D6A7E1920548D052C7AB18
31CD8F1E6F01CDE398A3464141E18D2DB8A524CC3BE1885811A2FA4464E9BFA4
4F3B137A209AC07BC2D4DC8265BE2C3CDB96FC76B4E494C7989F89FD865B563D
37857FCA1A5FB165B3A362BB87A93EC69254C2AAA91985E82347B6547083A306
CE> |-
/m <1C60D8A8C9B6A0FC22F7FDE4D70269FAA3ABCE84D83E02588B58324048A2
9EDA3366025ED35011C3387E67BBE9855BC9117A7F78166278323249BA674DCE
E9AE9196653285F341F22A75D7A524C07ADB322A3968B0FE8E6C4637BB81D36C
67F8701364C2FC3DF17B599D67F1171C1AE68C5656E14227198F5B75BDCAA6CB
9FD5CB83960FD443FF0E2A9347589D2B52A0B502D664A1FECF415B888C78C953
32B5951EC5EFF92616EAE4ECA8B9D3B943C765E7EE8E2867E53EC3D42AA7F4F3
67795C4524B73E7FBC0DDC9EDE4B202217BC4D75DCBFB156273EF107894CBB24
61A6FC49EDD928715F2DD04BBCA7A926AC7B68321CAEFE4FB87B0610008516F3
EA45AC0B8E9A606F2C7B0F442EF2AC478DB2CCA5A9E3A06A53FFBF5FE74008C5
3ABA0EB809A9BDD336F369692EDD0748FD400455C74E743F57DE4D0ABD30AF90
BB658997874F6FD991BF214F0044AF0FD83B05E8FBB85B5F594B2318479B4B46
D9C72FE71135EC8E0CEF9B75ADDD8FA2549A36F4C5A3BA0E174F8F9933BCFE92
7331B75B263902852A8C7A8E55AF4AB72C3603BE325B0C76C762D28397C0100D
336270F43AEAB0947E477C82A82BD10036213E1512830E77> |-
/n <1C60D8A8C9B78256DD09855002C1F642102EC28B82F48E21B28CD8D11618
04F5A9A747AD2624D941564B1DAE90411653B58E89369C53390A39373C180E92
1901CFF6CB5B97D1E2F6881105A39AF049AF7BAB6A1217A5C2B8A9279563CA12
76FC02BACD1EEE8432C4000AF8AC8B81C2B3B82F6968BF9741308293C4341FD8
C1BF06F82527B4BB1BFEB05C7AAE16687F72280798047F2DE0F0B0C1A73D4FFE
FAEDFA40DAB27F9393250746B607E6DD1B8488942E5E65DC28EF4BF61000038A
490B102DA889E711AC446FA2AE5AF546DC759185DC2C75747BB2C76E9F900921
B79B64F414F07BA72B97757066640FBFE321B86C7EC04E0E0AD1B078011E4790
36E3D4D1746C4387436B0F75E38AB678D2BFE9BAAAF021F8> |-
/o <1C60D8A8C9B78181CF98F408291F4DD5CDCB6D065079E3C32B2DC7574F85
010122317EAC4CB787C5DCCAEA2DCDF59718E98AB798D0A7C1D0A4AFDAF28987
02DB340B4925E43E83E5146EC936D266F11A185F61F58114BA94B80C81D7D8DC
D3FC28BA75D8A38DA3AC10DA8DE7F6935CAB2D98F05D04B7C0D79A2CEACAB661
A11B789E89B6D4B148DC1A7CB3550A2956556AF6D6068A328964C77CAC19F987
75B69DBB8B2282422672CD9527E49182094C282B5043D56AD150402E5BC1D0FB
CC13812FC82AC63ACFCEEF5D77A3A595F46555D44C6632B4645C234C6CF48BE6
8F54878A59D4C863675CD2B4AF968FD7298C1FD09F77D9> |-
/p <1C60D8A8C9B78256DD05CEB4DA9E965AB07EBB69AB364D14F4B8A1E6129E
1A1B57A9F6AF54A3080C4C156F4713FDECBA67C18FBD4873468229BF2E56E475
55C842162EA8AFD838229FDC9DDEF310896F702CA81E89654B1920C456B61229
04925826DCCF02D5C1E273B9B70F686A52F233CB0BF53CA99DE0726AB8843AE1
8A2F544EEFCCB9368EBBD2EAF30818B845E8A149610E23EA632E165F5F7A4520
EBF45E5F0A7C6C568F3780A23188579ACA934B1151F60150BE69611E3BBA1C15
169CC459A53E1BC79B4E95D0D1E38FE34738BA484CC420DDF487453BC7EA44E7
585361232849BCEDF40AAC7FE11F5957D235AD9EDF320D6585B01D68C46BE5D9
691D1F0D2A2633C87BEE9F7062A178C86B69B109CEB96764C1C8FBD01DA9DDE3
6AB596536073622CAD7E9206511E05DBC09A13A3DCE8DBA476EE29BA282BA829
67374BCFCA66C6C7134003DFF5B8CBD8A2DF42CA27C9663DE571271A8218E1F5
A8F5301D> |-
/r <1C60D8A8C9B8096E3702EF2E87B058AE842B207DEF574BB847CCD95112A7
D3AF2292BD58741562B9BCC6292F597F1D5EBCE0E807704FFEEE94A1C26C1217
A6936D01C623E2C5895684B5E303EB80975424515B84C7D69EC348651F11929D
BDB8CCFDA7B6F9C1B9009E28D94026AB5BD0038F56495AC64C32BF2B47869240
B887B12AEF109BCAC343F49ECBE16F183F080759D157DB3263D01310CAAE2C54
DDFFEC62D46A41ECF6143B8F31D2939D6A574F5434EA593BC099DA68B97E5EC7
884FCC239BC4456DDBC4F814CD1EB45CF26D8A7ABC526080AD2183CF51F78664
0C20279AD04AC16902E6B89034C7C376D1FE7A7CD7A590466C8F02B429577E18
2F4F0EAD1CF88B5E7E78E67C50CD4796431188A92962F05200A8DB3D5ACE7A4B
4F41560DE12E28A90ED4FC728B93C15758> |-
/s <1C60D8A8C9B70C3961F94CC53AE3C44F5C46AC95D939CE1FE52948C4EEE7
85E0FF2F5DF6799D25AA3A56FE93A6DDD98DB4188430DEDDFD51DDDD0EC4FB2D
10B9991F4B7C4CB67E794966F2D33D75FB1F2DDE6EFD4602642CFD9DACD32FA3
6EDA8C51397D987B567B7680BA36338AB94FBCABA34B92422BB4A6BB2CBE6206
F57AA0A2A8A2C374FA199F756B8C6892CB5299CACCD25A505726792E9EDF4479
2CB8DB652BC2C1E7DA21138C5E5015116A1741E17007ED6C22C23344D4AB6862
1949E14CE8A88829C82C8B15CED1FB4CCBFE9D40DE0799FB0EF64F8A219CA309
825B69AD031354812E61F884D22EE3AACEE031A6653B1519602284061900E2F8
27432CCC337FB59A551E141C30CC55CE4632D5C31E3FC4C5BA252294FEB6FD80
75BB079C3F24431E8D5C774D59E09AC7C64BB8C53AB6E9F8C7BB53DE483CF423
4705F7D8C8DAE52A381BB24528B826C29FDDB8CF4F5222BFD577514759571983
51D7133DAADA661E1D1810802FDA79930F2C9526AA05D8290ED2102740497D73
44C308314BA0C891CD0738B84DA16A83588E2CD4B55EB551DFD1259DA456FC99
12D108BF1E0B750B68510C7DC36D8861FED79A1710E9E95C8C80B37227AD97F0
B3CDDD> |-
/t <1C60D8A8C9B811DA5D4543EFE763FE07FB96B6C57E1041B720B12395755A
D170E1C95BCAF4A2E07F08B3527B85FB4B749D3F56190F68B968E525451C3AE3
228733358D3B0A4C671159FB2D66F4623773F95AB53B6E5F82C4D1162EF1F1D4
E57FDA1EEF70327DBE4F94D4CA953DA49B009A6CE451FDF5FD819F6892B657B7
073F3DB90026C98348CDA83213F5FE3803287637443B9875961ADEC93A662F36
7D30B1D64FEC94C3B7D13A776301EC9C6F446E01C4556C7599D35348744BB4C0
7BEDF72B7B19A9909847F0BA47C222B2E533F87C4B7AA516B5A1E0E7365242B5
879EFE81A74993AD272F8F9838C2A26DF98C12A45718CB59AC62E5107E8E34F2
7910F2367476C7C04E0E4233AFE86333074EFF0032ECDB6435F19DBFBCDB19D0
579CF4055335373B7C3C1BD559B22725F49EA0166722B1401585> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold /QJJAAA+Calibri-Bold findfont ct_VMDictPut
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 11{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 3{/.notdef}rp /m 
/n /o /p /.notdef /r /s /t 139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 15.3599 mo
(Parameter)
[6.11997 5.88004 4.07994 5.88004 9.72004 5.88008 4.07999 6.00008 0 ]xsh
58.9529 15.3599 mo
( )sh
78.2729 15.3599 mo
(Description)
[7.56006 6.00008 4.80002 5.03999 4.31995 3.00003 6.36003 4.2 3.00003 6.35994 0 ]xsh
135.273 15.3599 mo
( )sh
1.23289 2.27997 mo
1.7129 2.27997 li
1.7129 1.79895 li
1.23289 1.79895 li
cp
f
1.23289 2.27997 mo
1.7129 2.27997 li
1.7129 1.79895 li
1.23289 1.79895 li
cp
f
1.71289 2.27997 mo
72.6329 2.27997 li
72.6329 1.79895 li
1.71289 1.79895 li
cp
f
72.6329 2.27997 mo
73.1129 2.27997 li
73.1129 1.79895 li
72.6329 1.79895 li
cp
f
73.1129 2.27997 mo
403.354 2.27997 li
403.354 1.79895 li
73.1129 1.79895 li
cp
f
403.353 2.27997 mo
403.833 2.27997 li
403.833 1.79895 li
403.353 1.79895 li
cp
f
403.353 2.27997 mo
403.833 2.27997 li
403.833 1.79895 li
403.353 1.79895 li
cp
f
1.23289 20.28 mo
1.7129 20.28 li
1.7129 2.27997 li
1.23289 2.27997 li
cp
f
72.6329 20.28 mo
73.1129 20.28 li
73.1129 2.27997 li
72.6329 2.27997 li
cp
f
403.353 20.28 mo
403.833 20.28 li
403.833 2.27997 li
403.353 2.27997 li
cp
f
1.71289 38.7599 mo
6.87289 38.7599 li
6.87289 20.7599 li
1.71289 20.7599 li
cp
.246555 .194827 .195529 0 cmyk
ef
67.4729 38.7599 mo
72.6329 38.7599 li
72.6329 20.7599 li
67.4729 20.7599 li
cp
ef
1.71289 56.7599 mo
72.6329 56.7599 li
72.6329 38.7599 li
1.71289 38.7599 li
cp
ef
6.87289 38.7599 mo
67.4739 38.7599 li
67.4739 20.7599 li
6.87289 20.7599 li
cp
f
.750179 .679652 .670191 .901488 cmyk
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 33.84 mo
(p)sh
MSWTBF+Calibri-Bold*1 [8.04 0 0 -8.04 0 0 ]msf
13.3529 35.4 mo
(a)sh
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
17.3129 33.84 mo
( )sh
73.1129 56.7599 mo
78.2729 56.7599 li
78.2729 20.7599 li
73.1129 20.7599 li
cp
.246555 .194827 .195529 0 cmyk
ef
398.193 56.7599 mo
403.353 56.7599 li
403.353 20.7599 li
398.193 20.7599 li
cp
ef
78.2729 38.7599 mo
398.192 38.7599 li
398.192 20.7599 li
78.2729 20.7599 li
cp
f
gsave
73.1129 56.7599 mo
403.354 56.7599 li
403.354 20.7599 li
73.1129 20.7599 li
cp
clp
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7B6440707B4051A5DBE562555C57029EE089BD9C0449CBA1C
DE15C4825E58F476AE98F4F477E10D3D9627118D612BA7F36DE667A502083FA2
B5A87FB2329B4599145D540EE26CB50F350F1C24FBA25930C404B0478F3C579C
4E768F279D098F515881442D0DB18015E7A9640759CC77EC73BBCCD8C1932872
FD5A8725311BE90CFB90EBC81A1F03816E32CEC0A4E1DB1A22099D4FCE02BD53
A243FE7B67435108D6337E9414F0B3B9D88A863DF0DD8EDB216F3428E1C8EDAD
F4A32D7B4C28D91BCF9108C9794A650A0922E44EBCE859C2D94676859E04DBB6
727B1AB10957F28903A4930A> |-
/a <1C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA57
F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA105
01967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E32D
9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44BE
33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E3540
20A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA93
19522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE4394F
ED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B7814
0CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF41
845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F70
E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC70> |-
/b <1C60D8A8C9B78E05EA9D9733F4614DDE4F3CCBD772458631C06B9585CEC3
067196C085285D4EBCA830523DBA980A7903E7CCB9545952E933EA287D309550
0A08B5FF1250FB2472C48AA643F9948B713834174A32233FFD00CE8E2A02CD92
CD0EB36D86747ABA3C4EE4A7096B26460185FCF827CE5E1862348B87101A5C9D
384541120A40C8C71F0748956E48EF5E095EAD17FBE5B28249366E6BEAFC298E
E015C31B731D6166501448A2851B390CD5E1032DCB65F726222BA5085B034CFC
917DC36E2C73558D1FCD108B1B305D16C97136B39697A594C46D2F068CC61EBC
8B61EEBACA2E9B9971F359DB93A6910B3669C04870AE086A03B453BCE1E9F2C9
24C2B94631466A458EB1B3FD708C18C058A8B05845E2D231DD130E2BCA4DCE6C
A2C90256ED106A2B8A867758EB2E1D464AB1AA657324F30AFED658994E772592
420FD616D7BD6885B5350E3F2A59010B037CCEDD5B3D83A476690BED59BBD82D
D2D74F> |-
/c <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC0262
5554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1ED
BE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40
D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4E
A25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B139
8AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5
FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D1
1EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC
593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC0147
8225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA2
91D6DE23> |-
/d <1C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F3F
003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB516
1C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A218B
CA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A2C
F6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D310A
CCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE699
E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2FBF
94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A155
45986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F77
872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD97
C6> |-
/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C
715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCB
F09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22
E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D2
4AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD
61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0
832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D5
8BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAF
A402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5674
78E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/f <1C60D8A8C9B83BB8632FB1D3D91BD66E5512F6DD2CCB59074315803E2F43
0B096626F50C9126DF15B1D22935F28B97AB5D3B7DB8B1B8EC17F9868DFC8B9B
A6A909CA8727D3C9D8FCF13C3B6D5F4F33EA07DFD158F20416D4C6EEC8FD3EF1
4FC86346A94355FA1C2B6FA55C0124FFA9705858D4628EE39DA0E3A156A386DF
00613D8189EFFC0AEADC5BE3915D9C022BA6356303A46539775608C62B3D24CB
372AF4E663162E7C4ACC81D2F2C5F206BB702A5D73C1A974C0BFD7875757B79A
A73010AE51501D97B980E0F2ACE1EF1ED3F60A9C6E02B8D29057E3D98A685003
06E46C9A2B914F56A55773A150BF63B33B5E351FC714462135973FE682DBCBC0
C1B38B7A71A2F4C684D75344384C54C140B13A70313E2F4EDF68E127B4C55F26
525A530E7BB82AEC944EFDC27B6BB93FA6C499E5069AA3B6387EF0576DB7B6BE
E15BB0B269E8ACB562> |-
/h <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B44C
FB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465BA6B
08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272BBE3
CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9D3C
DA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61B3F
5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B14661
497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85E12
DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |-
/i <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB5
8D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2
D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7D
D61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688B
C2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D74
26B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293C
FC> |-
/l <1C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CEEB
752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61F4
A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB55
EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F89372931
9FB81429> |-
/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823
786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035
F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B
38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDA
B683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B53
8683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76A
F894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB
40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC80
8623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A
8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED
8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A0
6867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD5
9A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6
925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
/n <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F
0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F3133798
2CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444A
FA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D624
8BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B580
8B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE2661901
2C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487
AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-
/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12E
AC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F5
4555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31E
E69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC6
7800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98
DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B4
8C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A
16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
/p <1C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E3572253
2C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE54B
9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED971
ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF274FF
E1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9BF18
F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A3308
77D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE943
0EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E2967
30C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D409BB
55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47A8C
1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E30959
64CC84> |-
/r <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722
A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5
B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7
993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0
B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47
D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832
FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688
822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889
D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE8
78453F5E6DCAD449D1F3B7D54D32C49DA0> |-
/s <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08267
9294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E8
3D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BF
D271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B56
65CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786963
8F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EA
A7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954
E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370
300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B
3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E03
49313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E
62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2586
1BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2
BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D
386F88> |-
/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C
9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435
DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67E
EAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DE
CDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571415
1061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC19
0F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF3
22060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E
0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1
E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
/w <1C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71B03
2F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72515
DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07EBED
39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE909
5E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09395
2061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349006
897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF9310B1
24D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81702
937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930B94
0AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA15146D
5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524D8E
C40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |-
/y <1C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E365428E
EA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE986
6EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B743
8090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06F53
4EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0CCC6
D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA134
92A2A7CF82E9D18F6E0413> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 80 /P put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 121 /y put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 47{/.notdef}rp /P 16{/.notdef}rp /a /b /c 
/d /e /f /.notdef /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 33.84 mo
(Probability that each mode attempts for transmission when the )
[6.23997 3.95999 6.35991 6.35992 5.76006 6.35992 2.76006 2.76004 2.64005 4.08008 5.40004 4.07878 
4.08008 6.35992 5.52005 3.96008 4.19998 6 5.76004 5.04007 6.23993 4.19995 9.47995 6.35992 
6.35992 5.88 4.19998 5.52002 3.96008 3.95889 6.00003 9.47992 6.23993 4.08008 4.68008 4.07999 
3.47992 6.35989 4.07999 4.07999 4.08005 3.96002 5.76004 6.35989 4.56009 9.59995 2.76004 4.67886 
4.68011 2.76001 6.35992 6.35992 4.19998 8.51996 6.23993 6.00003 6.23996 4.19995 3.96011 6.35989 
5.88004 0 ]xsh
grestore
78.2729 56.7599 mo
398.192 56.7599 li
398.192 38.7599 li
78.2729 38.7599 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC36
88D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818F
C76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B70
8E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2
F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4B
EA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E2
2AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F
660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875
BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 47{/.notdef}rp /P 16{/.notdef}rp /a /b /c 
/d /e /f /.notdef /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /.notdef /w /.notdef /y 134{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 51.84 mo
(medium is sensed idle)
[9.59995 6.00002 6.35994 2.76004 6.35992 9.47995 2.75998 2.76004 4.68008 2.75998 4.68007 5.88002 
6.35992 4.68008 6 6.23993 2.75998 2.76004 6.35873 2.76007 0 ]xsh
186.153 51.84 mo
( )sh
1.23289 20.7599 mo
1.7129 20.7599 li
1.7129 20.28 li
1.23289 20.28 li
cp
f
1.71289 20.7599 mo
72.6329 20.7599 li
72.6329 20.28 li
1.71289 20.28 li
cp
f
72.6329 20.7599 mo
73.1129 20.7599 li
73.1129 20.28 li
72.6329 20.28 li
cp
f
73.1129 20.7599 mo
403.354 20.7599 li
403.354 20.28 li
73.1129 20.28 li
cp
f
403.353 20.7599 mo
403.833 20.7599 li
403.833 20.28 li
403.353 20.28 li
cp
f
1.23289 56.7599 mo
1.7129 56.7599 li
1.7129 20.7599 li
1.23289 20.7599 li
cp
f
72.6329 56.7599 mo
73.1129 56.7599 li
73.1129 20.7599 li
72.6329 20.7599 li
cp
f
403.353 56.7599 mo
403.833 56.7599 li
403.833 20.7599 li
403.353 20.7599 li
cp
f
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBF+Calibri-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/q <1C60D8A8C9B78256DD14A9D4CFBED1BDC0F25D5946994459D8D8E5F7EEF5
FA4507B6481B412918570C3C764B66004901202D6CFA99CFDA72CE674EEBB8D1
98FC6502F0508398028D032F74C949B78332173655CA807A9A2B2F4C4601D2E2
6C4BD5C0058BD19C708CA161D993829DAE488484EE063CABD99BEFF93E8E3959
FAAD29FEA051F8F5EC6F7CBAD3BDAB2F80BB44C5F7E0FBB7646F4915A5839B66
7F4113BA4E18F076A2A4852D8DF3C2864201976E285CA1782AD92DE2D85399FF
7F3CE4F4744E2AE724AA030A83D432E468A0908103384DD2C91543A6887FD4D0
8CD308C795374CE8369A1C03AF3995CF11BBE810B1D78ED996FC9F368C927876
EDF22C4798D534B994238911A32DD630C4C193C3D2EA94B63AECF4674C6664BF
A01EE77A37E92FC52892F097E22C8198E7C6EBD93E29A3B57077C10504BC0304
06C16735334976E505DA27A47E0734207243AD950A08CAE1CD098A174A50> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBF+Calibri-Bold /Encoding get
dup 113 /q put
pop
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 11{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 3{/.notdef}rp /m 
/n /o /p /q /r /s /t 139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 70.4399 mo
(q)sh
13.3529 70.4399 mo
( )sh
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CDC942CCCB390E2EBDECE84299C1D70B94D48EDEF
C24B81F8B75DA3F1918432B2F409095DAC0582173DC4C65D9100D9F1EF0E2958
905CA03900BBC017CC2C22078867D9B93E99C98F73B8E920E64E58EEAC1F48E6
FF3AFDD35294E3193433723D3D3D96A7A9DC268DA248D35EA485B997E6CEB982
E59BFA79BFF841543DC2846254603C28F3C8573C4B1EA3072066B804365A5C41
7413B2C8DDE73D> |-
/period <1C60D8A8C9B86ED904792469819B411F782D644953F5FB87FEF6645
79CE5AF47E01D6D9A7DF6EB24F15E9AD1EE074A41E03462D7DE0F1E92BD9640F
3458F7DADF49E5D4EB0B3> |-
/g <1C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D412C
8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E651450F6
F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313A0C
BCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A3326
D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429EBED
17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD39281
2122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE3380BE
2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5F4D
FD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A496F0
E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D283
C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E72E
DA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D5831
197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4EE7
C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA604549FA
9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E2F6
778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D207947A
0FD5903276> |-
/k <1C60D8A8C9B7741C17C040FAF49715AF86267B27DBAE3194A95B5AD38B89
D87080BE0BB58EB11BB1E803576225E95586AD26F7B3D48F1476D58A2A86ABCA
434890634DF0C762F9C7E8BF973278771D68A2AB608CE3A494AF06CB6B758E30
92B2656DD102F8A88BFE70D0C2C45E36E8C5A354AE77BB4C9BFE5EBC116B51C4
E77B42DAC17192DF74E54FF0A0E8E65A4C44D1E8C03486D513E268A349A6666B
8D2CDEA67E5546A4296B6217CED1A53C88AEB021F8A41388EB02CAFBBF0D0089
75299F905C6726B8AA428B45A937A574480AA1CF753F93A4428CB2EBA3931191
4898272650C4BA4DDD9656B5AC379C0EC3487701AF2D0DE9556D9F04967DEABC
542665F11772DF361C1B5D5C1660B923FBE08FB5DD4C469DDCE72B7887844550
CCFC42576B209CD2E7> |-
/z <1C60D8A8C9B730312D3B9FD0D7D3CD8F73CA7482A47B9A0C5EBB8D9C4D98
DA00445C393A8A3C92F0B72E3C5A55EBE87B4B104EEEDE00896F3043F9EA5FEA
E2D09EE1F9518080A25EC187382BB2FE6B96B4319BA8FA47FF3292806950C7AD
1E51CE11195B89531D756B2444887ECE4D80345E8481C7BBB3F1859D8760812F
46E762B314B89E5BBD73DAA36099356F36CCF3FB58DA68452518A4A9E54FC8CB
62CCB53C21C1597AAED9F7DFF5D9F8736E0DAEA7CF6C40B4F7AC9A77299C9FC7
F7E0C0F63C47AC2142D763F06F4CC7B456DC0F98B8794A21B57D4CCE81D995F0
933BB99FAF061380AA32A59D16AB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 44 /comma put
dup 46 /period put
dup 103 /g put
dup 107 /k put
dup 122 /z put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 33{/.notdef}rp /P 
16{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
/.notdef /y /z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 70.4399 mo
(Parameter for the geometric distribution of the packet size, i.e., )
[5.99998 5.76004 3.95999 5.76004 9.59996 5.88 3.84009 5.99881 4.19998 3.95998 3.4799 6.23993 
4.19998 3.95998 4.08008 6.23991 6.00003 3.95999 5.5199 6 6.35992 9.47876 5.88 4.08008 
4.20001 2.76004 5.04004 3.95999 6.35992 2.76004 4.56009 4.08008 4.20001 2.64001 6.35995 6.2399 
4.08011 2.76004 6.35992 6.35989 3.84 6.35989 3.71991 3.83997 4.08008 6.35992 6.00003 3.83997 
6.35992 5.76001 5.04007 5.04001 5.88004 4.07886 3.95999 4.68008 2.76004 4.56006 6.00003 3 
3.95996 2.76004 2.99997 6.00003 2.99997 2.88 0 ]xsh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+CambriaMath def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
dup 114 /r put
def
/FontBBox {-1475 -2463 2868 3117} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF10
86964F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A8
0E782DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B41
3623F5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA365
2F7BDEAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17
F78368B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259
FB36AE72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE6
0F42D9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF341
1DA7FD9C5DE33005> |-
/P <1C60D8A8C9B7E39F736E9E5D79D9CF923BB7AEC7AE748547BA8CAE6446FF
606D41AC7CA40677FF6CFA3FB8953541AB3BBEE643DFAAA6D500975C64676930
4432CACDC3EEC7906E6DC9435E488EB60A0EAE146BA251F948402A3FA0AE2C59
D19E1DF54D376EA9E1951A0A6C22BCD44D94F633635D950B4FC64242BC14F78E
4A0450F3C6E9360D5ADBB56C0A57148A26BC538F95DE8CCB56E0CC59AC0AE9CE
3D65DCD043EB45C1CAF9AF3487AE89068D73655D95C873360FFE8FB60831F350
6FF440CDFE17C4F6430BB977685F5D0BD5E3796F29BF3D4576C5EBD4> |-
/r <1C60D8A8C9B71DE7D25344136B1E19A0C5249524730A9D722101CFE19960
6C495CFE2A2BC5F614AD7CD3BA0E6229377CB7F4DCF11A4E4E3F7D220C76FC11
52449DD54246A5B94476CD0D191F2155EE7D8F3C5E6EB492FB4EFBAA0897F3B3
4B127CCBB86DCBDEA4D2BFF1216C017BCCC928CB52C9A09D457605879D73DA17
8B89AE6A6710AD124C0D0FC2BF76FD327F70D62F8CCB17BCE41DC7B32299B935
84FD9C6EBBECD9FAB4A30F716F43D5209C2450E67590D13DE36091AE8AB9CFB1
1B> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MSWTBG+CambriaMath /GFNBAA+CambriaMath findfont ct_VMDictPut
/MSWTBG+CambriaMath*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 141{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
78.2729 89.16 mo
(Pr)
[6.83992 0 ]xsh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceleft <1C60D8A8C9B738A272891E94A5CCAE674B4BD5525497E2437EB2
BC72F8E9B21A8A7C7B90B1347D2E696D798A8B62F8218A2405487062559C4BCB
2338C987EE7DEE510956DD0349F34CF20BDECCAE6F2A3829138717AB56E2714C
3617D3F1347B43EABBE16DA8B28203AA9EFE58F424FA528F61D6626F8EFB0E81
FD37CDEE43FB76EE92905E37803F50FFF2C850DF2EF7D6404AF49E7B26A6C504
AAFDC0BB6E235207F6C43EA29ECBD6280B8685C1E48269AF25FF3EF242B10BCC
F5F86A7688E38D38EB54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 123 /braceleft put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 8{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
90.0329 88.68 mo
({)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B75378C19F29519F2DAC72D75B146C28374206FE53EDA310EB
3A671A46C65A11C868334DFCE8FA192E610166819F016D3B159774B8197AF91B
0A47BDE5DF14C425A0223356C2B3ABAD1EA1131B5E66A2108089A3129C9A2DC3
1E1C79442AC0365F263768A2A960F11FFBC2F4D65D64DF5FABA4295F58D9E8DD
E24D4A5EE08A613E254F0760853B3FAC26922FFFA5B25B736C5806ADF9AABA03
4E888DC74F8F0B2F172256FD9AE3260A76E48A5EE6A328A9289CE14B1C8F2AF7
1523CE0BBD4CECCABF035A296ED7CBB97BCA79C07658A94D193D5CEA26B32F90
EE76621515FAC2B36A6C388B1E2BCCA82920EE92D4F55E207D95A2FB7D> |-
/c <1C60D8A8C9B762804184642007D66ECC17DD199766A604F0BFB26A474E24
DF315EA1F6318863848A105EF22964B3070E6B7856BFA2823DF724749EA76FB2
4EFAD0DC55D9BE84E1742FE172F7519A8585E50F3BD4F891FED585DA6F41C0F0
9BF59F2E06B0AC488783A874AF56FADD60B51D20DC22164035A5A91789CF8B64
07AF856B7DAA370CBDBDA0346D58B9A0858FF04697B0F9260A14EFE8CF23D430
3518502DFE7F0C5C4194FC612C4C05DBEF03FD4343E6194B38> |-
/e <1C60D8A8C9B75378CE939ED1FC24132CC16FE480D1A3EA8DB03CCC6384BE
17EEFEFAFF08F9B79A2673DF384526E412E9AEF3EA148527CD82A2E75C2E0D6B
42935A8C99D4BFA73E29A874645E24D865B249CE2B24C7AC20404151A6845150
B70880CD1AB691082DFE2DDD21919909C1CCF0C9CDD7F8123E86916044655738
A56DE32426C1EE6EA4F69BF5C88714AC148D30453468F3EBFAED2BE654ABE38B
2725FF2CA68113D4989A29DEEA912985134E7E4C92BC> |-
/k <1C60D8A8C9B78FDBCC558E6DE9656DAEB21BD4E56B12B41DDE503B7B4CD3
B972D95284A07C68FECB88F9743550E5C79AA268B4F30C82FD59E87531AA5FFA
A633F0F5923BB3146281B67F1ADDF90CF4C8AB60E223AFD49DF03EC4E85DEEF0
442E03F0BD76769D4C7D1A6C7CCDBB967DF364A9F78CA799A86C7C8AED904FD8
9BDD8891F1A7CE499AFFBD34152589103952CCE5608DAE9CE7088F795BC7A151
582949D531CBEA19E53B85D7A250ED8E29669B2BA48EC05DC7576979F87ED586
B9C8D38921AA14BE558F0EF8E2E935A04BD3C531DAAE32C0F5C81AD447C8D6DE
94597C374DAC2EF2048ADBFA5452040E8059D08799F9DE73AB5068C293BA0195
ACACB41A18C0E1CF0ED3649288586004232BA2C520F80BDFD61F51DF85DFE280
D8D9639A> |-
/p <1C60D8A8C9B7EF322B68C9271AF6B33E844F008DD3D7802F36CADE353A51
1C96D124C678E2D91913A8B2199791EAD8787DF6EB9182A150682AFE1158E402
7E6865EC54B9B236B76FA190B945BA07003530965677699D3AA5DE2AAB156059
602380BF17BB07FB541D7DC60A865B024796F0152DA296917B02DB624D6BCE52
141C3C2478E13FCE03843C4F047B2FD82DC81687CBED64854288C98274CA7AC8
87B546C8D0970506C9C285EEBD0BFB7ABB51B652AE19FEC3288C57D41ADF603D
D64C0B5C6B1B1B7F28AD3E8DC05D3BCB928F0287E2C0BCBBC0F44CC13CAF8EB0
C7FDC32E13278CEEAB0EFCAAB7076F50329C10E03E65AF24410317C619D1BD67
7917902D6DBCFC16A31DDDACD6ED74026A8226538672050C354A10C57312DC2F
1B768E> |-
/t <1C60D8A8C9B81871A500C9CDAFD707A7685A82FA219FE021834C763DCDC5
32659572242F431384250307ADAFD1DFC16F48828FBD9B6A16FF25F16229B59E
E962C6DB9860065FD04846DFE122BD4C4871A2A713CC812A8C4C29DB3B4B8CEB
B7B4468782EF2A91F8811B3B10C1136D9AB0E3E2F12AEA4440E1B35A368EAEEE
79C160A830AF26062D22> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 107 /k put
dup 112 /p put
dup 116 /t put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[80{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c /.notdef /e 
5{/.notdef}rp /k 4{/.notdef}rp /p /.notdef /r /.notdef /t 
6{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
94.7129 89.16 mo
(packet)
[6.72 5.88007 5.27994 6.00003 5.88007 0 ]xsh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B88EAF6D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 47{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c 
/.notdef /e 5{/.notdef}rp /k 4{/.notdef}rp /p /.notdef /r 
/.notdef /t 6{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
128.553 89.16 mo
( )sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7AD0A34E98C1E9A55CA52864A60BAE12AB13C188EAD209B22
B0747ECFB5344BF57CBE2E7EA729CD4173F1A0A4F15BB655B73DC9A821963837
CB2AF7E7270811405B69B4F3D73417073FE059BE8A3905C8491339C020B95E06
1FD8D187971F26FB462A52DB1E0839F8E7B3C54CBC76F30615D2D798BACEBD51
3518E7E0E4CD06FAB8F99FAE811AF70173D3CA3AEC1A23929365AE611DFBE551
5FBB1B919BB25B871663B4C5A5B2933DD8402478AFBD369654145A07D62DF9CF
ECA589241C78AFA7C4D87ED632CEEAC9742D8D7F44FAAF558848B66C8FF9934F
0D26A0CBE63A61E870868AA7992D4E6FC5F989042CBB2EA95BA6C5F4EA89D165
83BF60E1B9537AE8B5D61093C97A6B15081B0412057C3E08930563D99089D842
89E5A243951FE3961EF6108C0E7F2989C1C39E4F9B47A0A74F5CB04BC0806413
0F3607FA02C58E3322BB0FD6D16E4BAF600FA44750F7A9EB682311078508CBBB
07815A0E4CF3985A6C308F7573180AE9B8EDEEF6CB493E69919D59F528A697FA
B1BEBB912BC389844617AF6E120F895EF2A1FD3C4E01EC5851BCE76D593F4D8F
E7A6199EA4B85114F9B4> |-
/h <1C60D8A8C9B7931D878F75245AF88708B3368D4A70C9A2C2A9CE51357B31
BFDD3CF6D0EC215CB45FEC3A676FF71C6ADB0230CDBA48750125D2A33A51A659
BA82DF66D25DE5D347F3EE39246F584A56B59FEDFBC88D34E85E98F5AC3CB317
9F261A4CB51E3906391B44241889613B5DA2139C36EE2407665B2A5A3905AD6A
1931A859B7FB77DEF46A3E83A3896BF617EB346F33278C3C834A2829C7D4A7F9
D46E86C970B607D4885CC73D1480EBA7BD969630F3060437864459845C54BEAA
4C2B2FA4E190DCC9C33BCB3AA003DAC345CAB5947E116E9A6A61FF513DD441DE
818771240211DE8D801A86AA76F2627DA96A0EA3B686B27E72F68C4F6F9EEE60
BF1079C81AB3113D917C6B545CB97E8F7BDF4CD7BD00A0458D32A187E0F935BA
0E3190790D7EE633704F> |-
/l <1C60D8A8C9B85D12CBEAB632D9A4EB39AD77029A42583DCCE76DAABDC2AD
8A13BEF56EADBB9E9B4DB8E121F799D6AB227E375A776C38110CB0C521385EFA
F0F829809B998F376766B837E00AD6676B9BFEB4C37D21DD1ECE5830A87E91B9
B8C7F90939CF67F41975DE7B8E2B65BF75FF487422F07D> |-
/n <1C60D8A8C9B7EDAF8BF523B7D2205294A9062BEEEE09E3169035C927D160
C6DEC56F2A21B03A79FD52A0404BA425169CB3DB801D2D23AF662F7397400C65
C6509A44C5566DC6E55F506017AD800A30925BE5C710E7687A23F5D2CC5A6FAB
5B85359EDC32320E9A621E9036638ACEBD98FF1D59867FF6D19A7216ED970E08
17486E4EB0B7E6D1A3024C33F1E845E0F7A07DDF303AF9479DC5D91F4D00C4FC
DD709E8FCA4C087E018E46234C1C70D6F503A45AAC369C6CC2B5839DE04D63FE
FB6E63611EF210464E5008C5371193EF133C8F816BCF5641D8499A2F03761766
0C24E715410B7E36B43DB4BE1B84DF1BFEB221205AF0C96B37CC8E90B7E534B7
954D7711B922FAB4D968630A7E1266AB5E7B7319095DA85036A7B24ACA542FC2
D90736F73C356891719F33A5451803602246958E933C168338> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 103 /g put
dup 104 /h put
dup 108 /l put
dup 110 /n put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 47{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c 
/.notdef /e /.notdef /g /h 2{/.notdef}rp /k /l 
/.notdef /n /.notdef /p /.notdef /r /.notdef /t 
6{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
131.193 89.16 mo
(length)
[3.23996 5.88007 6.71999 5.88005 4.07996 0 ]xsh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B61E1368B22F1E5A75A1D2E833E17F330EB01AB8574C49
17536FBB27C40D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 28{/.notdef}rp /equal 18{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /h 2{/.notdef}rp 
/k /l /.notdef /n /.notdef /p /.notdef /r 
/.notdef /t 6{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
166.953 89.16 mo
(=)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B854D0EFD26594851468A5C876B3DE4CF671172A8D71A05EE7
A02B9F2EFE59287A82ADD423E8A33E4B218ACEFE0209D4CFC89A44DF15119CE5
28518D25D3541B5F907E325965E69AEA28FF8F0B201CCA62FABBE567B4076F40
A93AC9C769634480F237B9A2DED92B344675A0E1B1659FED2905017F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 28{/.notdef}rp /equal 18{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /h /i 
/.notdef /k /l /.notdef /n /.notdef /p /.notdef 
/r /.notdef /t 6{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
179.193 89.16 mo
(i)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
182.553 89.16 mo
( )sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7883C34FF2FB4ABF433096DE72A6FBAA57D47EB1A7BA35111
A4CC1857F557BF4025479AECBB61827B09EAEEBF1BB1926F1DEA7184A2161486
E72840D181FF27D231024EC3E9C147EDDDDBDDA6CA8B65070BAA34F4BBBCF133
FC24EB7DB478ACDA5A2B4337AB409B7153382B8932F24C012B023ABDB24CF5B2
F07CE80C215297DB7BE5A7EF481CA8C99A51A8CE9CF17FD4159D293CCEC87154
D3D737EAD7B0EE35F7> |-
/s <1C60D8A8C9B76D61A1CAE9E34564F0D776980C32A2DAE9389A47D310A441
98609CA07144BF79E9C2DD6F2898A819C3B6BAE95D66DAB543633AE3DA9AE37F
4F8F8AD98C3C7E1A7122CFB17A45165E68B511C4CE9F5845E5CB23CE903A754D
462319C8BBBA1B593C08C996BD8353C034322194D529950E32B6B6FF4505E329
22FFCAB2BF25EC7A7B409EE7805BF8607D81816D8C40B9C303AF42E4EB902150
E4DE0B3F4AEF702669A5C6527B763F9B16B3A4F8B9D66E8C8A56A25B656AB47C
B74B55AABEB83BFCA97A72107E9115740472176D242390DBFC084A45E79183DA
676EB271C7D0CD731E55CCA9C5B7D052DBB56CA5556145154BF279CCE005A525
305016A640> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 111 /o put
dup 115 /s put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 28{/.notdef}rp /equal 18{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /h /i 
/.notdef /k /l /.notdef /n /o /p /.notdef 
/r /s /t 6{/.notdef}rp /braceleft 132{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
185.193 89.16 mo
(slot)
[5.15991 3.23996 6.36008 0 ]xsh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceright <1C60D8A8C9B738A23C1AA1FD89AFDDE7A2ED85FCDC5451A5E67
E426C801DE10FF05D9E5F97B21BD6AB78BECF39CE24262ADEC36A3E6D1C25EFC
86B025CA44559490A9AE06C6B1E5F8991FA70630DD116B5DC2D8992EF11A964D
B44B9AA240BE490F11BCD1FEFFF8C4D53A5A78F65075497E6AE76E96BD77A4DF
71E945D33482C75255145F527071B4E0696292BA36A9F025E3D2A9D028E15E59
341BFEE3CE6F1474BF65DB84B75157C68BFF7E4B2279B3914516997589105BB5
666DE0FBE77977DD7BD07E0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 125 /braceright put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 28{/.notdef}rp /equal 18{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /h /i 
/.notdef /k /l /.notdef /n /o /p /.notdef 
/r /s /t 6{/.notdef}rp /braceleft /.notdef /braceright 130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
204.033 88.68 mo
(})sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
212.073 89.16 mo
(=)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HJCBAA+CambriaMath)
%%Title: (HJCBAA+CambriaMath Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HJCBAA+CambriaMath def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2463 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4722 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1869 <001C60D8A8C9B780B319E416956E57D39B912EEFAF9F8285FBCB6B473F
3DA18D117B534CF86803B5DFD34344AEE5D8BC9ED00D9E480D224C02A350D8E9
DE63D46180F049B9495D73CA4CF52FC0CBD241EBBE437ED44F753C55A3FBA190
195ED796533E6DE52272D004815B9C255035037CF33C57158F105C791FE6F6E5
105B135E91D936D55A3C62E29E34DC76D82BB296268183B205A8F05911262470
E28FF375753F226FCA916847EB0A1370ECBF3B4361538286E347410B999F634C
97F35259B714C054005A42435D2BC6C582C208699DFA6A555FB5B445D9535339
4F43DA> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HJCBAA+CambriaMath-Identity-H /Identity-H 0 [/HJCBAA+CambriaMath] ct_ComposeFont pop end end
%ADOEndSubsetFont
/MSWTBH+CambriaMath /HJCBAA+CambriaMath-Identity-H findfont ct_VMDictPut
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
224.313 89.16 mo
(\007M)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
3036 <001C60D8A8C9B80D90626B47350D8CFED4ED4F68BB38C66295D24E5699
D9570FCECD638525EFAE26A26377A94FED420CA54FF52384D303A629F97031FD
2759C935910EDD96E3582354A7B7320922B330759641FD74A0ED8B718AC215D2
D412854E0BBB6A01CD88915A69969B8C141AB85A87195A02B92AE7FF2271431E
C08F2EBAE7571F11C3EF7946D3C828244744588177A9EBC4992FF50082C5BCCC
76CAC43A0964AFEB4D30891206F185598C64AA54709C700CBFB3D091B8493264
3DCD74421F504133BE1D4A177799C70357DE084BB99063B53F7B48240176CD42
6A5F> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [8.52 0 0 -8.52 0 0 ]msf
231.153 84.72 mo
(\013\334)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
2879 <001C60D8A8C9B60D6596100F38BA2E73DC5EDD84FE94DF> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [8.52 0 0 -8.52 0 0 ]msf
234.393 84.72 mo
(\013?)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
2869 <001C60D8A8C9B7F88C2B780E4DB2544561CAC9A20C6BB0B13699B706C1
363010DB765FA6C43655301BE09B2CC3CD96E1857F37F0C3A41E09A4894AF051
9685AD3CAD001A338BFE95F6F1AA62102D91F860C1C48E32F88B27AAA80BA221
C6190705435530756B753E8A19A3D6B6F9D6F69BDA4DFF70963E5D7172CEA8BA
E2A62723B33714F423A266021272A7A831450ABD0A86799213944A73BBF77865
49680961C310707B73A46D81D67FB83359220776A5236469A2820155406C9947
84A4020BC578B6FF849EE8BAFE5D3039B602F31D2CBA08D4C984BF04> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [8.52 0 0 -8.52 0 0 ]msf
240.633 84.72 mo
(\0135)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B71C16F31928ABEFFFF017561191015F2898C46D07
A640C9AAA59E42A52B1A58A0A78B02C4647FB5FBB6648C88F1A7AF596C0453B9
06915DDC60C338C117F633ECA49DCF0695E4CFA67F27CD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft 20{/.notdef}rp /equal 18{/.notdef}rp /P 
16{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g 
/h /i /.notdef /k /l /.notdef /n /o 
/p /.notdef /r /s /t 6{/.notdef}rp /braceleft /.notdef 
/braceright 130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
246.033 88.68 mo
(\()sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7917E85D3D67655686D266F095346DBF1C975D4DD04AD23
C3980FBB0261E5784F63E76EA1E91CA77E23B7CE6FB429D9654A77DB1B7E073F
7F97A6EE98F89B7633A4FAAC1D0A4E0F0F74578F05B7CE4F72AB53AD20DFEFAE
5CCD3471DD6B578F864AC5710AFAA7CBA4BC3D68A0ED7E5B8F367698371E4304
B19B62C47DCC6202> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft 8{/.notdef}rp /one 11{/.notdef}rp /equal 
18{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c /.notdef /e 
/.notdef /g /h /i /.notdef /k /l /.notdef 
/n /o /p /.notdef /r /s /t 6{/.notdef}rp 
/braceleft /.notdef /braceright 130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
251.073 89.16 mo
(1)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
3398 <001C60D8A8C9B61E1368B22F78F4F884FCA6DC0E2A1689> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
260.313 89.16 mo
(\015F)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
271.953 89.16 mo
(\007M)sh
grestore
gsave
73.1129 93.36 mo
403.354 93.36 li
403.354 57.36 li
73.1129 57.36 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B71C16F33ECE77940D4C90A0063C89C132BEE2315
FE9265F98F94C0E34FD7F7D2CFD15764F56978C4153211C67FC16E2AACA7B72A
C65146EDBF9108ABB23E4CFEAE0A64A6575840A029C95> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 11{/.notdef}rp 
/equal 18{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c /.notdef 
/e /.notdef /g /h /i /.notdef /k /l 
/.notdef /n /o /p /.notdef /r /s /t 
6{/.notdef}rp /braceleft /.notdef /braceright 130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
278.793 88.68 mo
(\))sh
grestore
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
283.713 89.16 mo
( )sh
1.23289 57.24 mo
1.7129 57.24 li
1.7129 56.76 li
1.23289 56.76 li
cp
f
1.71289 57.24 mo
72.6329 57.24 li
72.6329 56.76 li
1.71289 56.76 li
cp
f
72.6329 57.24 mo
73.1129 57.24 li
73.1129 56.76 li
72.6329 56.76 li
cp
f
73.1129 57.24 mo
403.354 57.24 li
403.354 56.76 li
73.1129 56.76 li
cp
f
403.353 57.24 mo
403.833 57.24 li
403.833 56.76 li
403.353 56.76 li
cp
f
1.23289 93.36 mo
1.7129 93.36 li
1.7129 57.239 li
1.23289 57.239 li
cp
f
72.6329 93.36 mo
73.1129 93.36 li
73.1129 57.239 li
72.6329 57.239 li
cp
f
403.353 93.36 mo
403.833 93.36 li
403.833 57.239 li
403.353 57.239 li
cp
f
1.71289 111.84 mo
6.87289 111.84 li
6.87289 93.84 li
1.71289 93.84 li
cp
.246555 .194827 .195529 0 cmyk
ef
67.4729 111.84 mo
72.6329 111.84 li
72.6329 93.84 li
67.4729 93.84 li
cp
ef
6.87289 111.84 mo
67.4739 111.84 li
67.4739 93.84 li
6.87289 93.84 li
cp
f
gsave
1.71289 111.84 mo
72.6329 111.84 li
72.6329 93.84 li
1.71289 93.84 li
cp
clp
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
2195 <001C60D8A8C9B5A128BECABD1FD7DC8B8140A87EEFC74D5194911183C7
E4390B38B560235A87E06D819A7EB9B1469544A832EA00664BA262E715C39004
FC89F948590A5F8C4716EE652642E6BAB58812FDF50EE73771AB22FDBE349913
4E6409609405FC47E829FBC40962BB62885EB9F567778E67C428B90B35132ED8
0B51E1DBE654AFE0B2B4A78C1F24E53324E7FEA811ED1176FEB2419EE705B79B
1F4958BCBC09FE6C87D68287565566A09267BE820DDCFEB1E0EF8E71C46FE60C
AA88EC27592A19EE976F5D94CDDA99B451D4721EC4E41F874B3597BA6876A320
993A69A8A240659B174845368E31D1220EE7E1C77578CEC2DF4A6B1330B3AB96
55DD1DCF55BEB2BE650A51CC82DF31AE09DA23277A81AC79CFFF49EDA0295581
CE32B249A09301D8DE4434AB351930804A11014AA78FD567CE88DD5279EA8838
25C9F745122D9943B17C3F3739E21B331A23FEABAB42543620E32C38C21AC58F
C75E63207B53DE6ABF1114655B96> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
6.87289 107.28 mo
(\010\223)sh
grestore
6.87289 99.36 mo
18.0329 99.36 li
18.0329 98.52 li
6.87289 98.52 li
cp
.750179 .679652 .670191 .901488 cmyk
f
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
18.0329 107.28 mo
( )sh
73.1129 111.84 mo
78.2729 111.84 li
78.2729 93.84 li
73.1129 93.84 li
cp
.246555 .194827 .195529 0 cmyk
ef
398.193 111.84 mo
403.353 111.84 li
403.353 93.84 li
398.193 93.84 li
cp
ef
78.2729 111.84 mo
398.192 111.84 li
398.192 93.84 li
78.2729 93.84 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F22
F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E0
C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D91
764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BEA
5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794CC
B8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A30
8F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-
/v <1C60D8A8C9B77771B09AD302B4CB2C18543FBB2E7E6342969838CF2C3340
35065E921A40A75882974808107F0F5C3AC1CD7A10BA6075C83F1DE48B37CB4A
8C976EF88D75006F44747CDCEE5069475B014DB29A6BE7A1F25A9ABA2642AE0B
12F169B7C26C5BB2C6831FDDDADD15DE53220C2A354D3DB65E39662BC3F52DBE
3E6F55BA2941DB48175EDD867619C5C4F72AF6BDE0336B64DD708A70A9B30434
46299A2061A5B31F71BCE056DDAEEEA357563374E361165ED57E4A9861B82CE2
6F9B6BF6D6DD8B8E105752A19647DA81C937CF2BEAF032E992A09CE082764919
EAB1094210448A121FEB79BB41C951E6B43D3384AE29644009EB9FEBB553A8B9
5EE31D86> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 65 /A put
dup 118 /v put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 18{/.notdef}rp /A 
14{/.notdef}rp /P 16{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y /z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 106.92 mo
(Average transmission time, i.e., )
[6.71994 5.27995 6.00002 3.95998 5.76006 5.51991 6.00002 2.75996 4.08009 3.95998 5.64006 6.35992 
4.68007 9.59996 2.76004 4.68008 4.68005 2.76007 6.2399 6.35873 2.75995 4.08011 2.64005 9.47995 
6.00003 3 2.75995 2.76007 2.99997 6.00003 2.99997 3 0 ]xsh
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
1865 <001C60D8A8C9B6BBBB4CE52FD48B04492F7E2C4553CF0682951AD3A11A
ECF5831A24A87C656A0D69E6B3A251121847A5EA1C42A3D4422CDEA588338B32
9750F0A21E389D7D04917B8E0ACA60B7997D45B0836F74AFD6FDE4233E53F1F6
127E777380EEE7D644B44B14EC752B448386E02915FE5315C2CFB862ADF5307C
3ADF3535657C54800CA813541B5D904AFBFB775874DD86710268602C0E5BBC31
0A11B1D779465B97010A9B5C439F33CE26F763FF4EE9D0BB02390100AEBF7198
900CB69F81F2486BB82B1A92109E77D3BCD82CCA2A769CC7ED004C622FD636E5
D01CC548E1471CF36E70E39058B430208A1E3AF422D6C443EFD472954ED4BB47
FBBDDD475260AB8774591ED7869BB582A2B98C39A83C4FBC10EE32BB74D4A526
8EE261014DECA557D409538090630A4266CD16A5F399EF2B8A5C9DF935D4F2D5
C755543176CBAD27E7678CBF00EBDB643D350F6E0628D52A63084D51D2658892
04740B8A96BFD413C7F2E23CEFF78D9DFA2C7B8E1F058071> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
236.433 106.92 mo
(\007I)sh
grestore
236.433 99.12 mo
246.753 99.12 li
246.753 98.279 li
236.433 98.279 li
cp
f
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
249.993 106.92 mo
(=)sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
1872 <001C60D8A8C9B730312D06925FC3E316998582E073D2AED498E58DF994
C139E0633A35DDB51C0CE5513E55A383FCD32BD691C4AD1A14513F46BD9C1CC5
57A94AF2E9E53390B7BB475095B52324F63288A8415446317AB1445DDB3F2AD3
C4F252D232AC22BB24F30A42A20CD28D93C86311707FA6850C9C87441E5FB601
C2B08BD963D05CBACFD0E6E609> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
262.353 106.92 mo
(\007P)sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 4 GetGlyphDirectory
3046 <001C60D8A8C9B757A3B4E88B16F92B063204ABCECEF04EBC4F82D3A088
37D52B66B2372983FA942FB780B429F99A44FF3E96FEA4A78E4A7A5710F0B050
B716F5CD4CAFD08A032BA55FFCADB14746734DBBCC872C0FC74CB94DF6DD5C77
F3C50F2CE18B163F48FEC9F35086722811C5B4805A79D5E0DC309518A554182A
F5D190E0BB5592675A740B23D08C040F95BF172C79DB96D8087F3F0E3B5CB678
CE0A35E0F3A42B512C471992383DE9FFFC2A4DF6FD15B8CEFC7FC8D15145D8E4
B79D899131A91D0A8CF98F05A9F4C549D468049E911BFF91D2DA4CAF4C27EBB9
2326BAEDF9793F8257808140FE404CA566740F4BDCFD37CAED1484E1FEA0388E
B14C7844C2BFC6CBEAA826A522EA3D51CDF352DE61B1617CC846230E3A2E3AA9
58A3D83D7DFD36> |
3039 <001C60D8A8C9B80B0D614A6D4854A40CD3995258539CBFDB5B178C6D53
031686896A05B56CF8F5C6D73825C3E2B1553EEA611BB035FEF95B24180ED5DD
8EDAAA76A3A701F3DFC5C45B11F4DAC2A1EBFA872D8D1AC289F81E544631CFE2
A006525FE19F66C46516B6BCEFC7F386D2425CA3B8558F2DB8FE0ACFC922D4CA
6C92706ED3E824D195CB2EE8C2D98ADA92C468EFA6717D082F62814CDB4E8D66
9EC99B29B40B79E9914B109AA7F0D45CE7F43B24CB329ED397E84FA602689031
D9A8C5896C2ACB4624AD2D1B52D59426B6048281F7648DFB41AE75> |
3042 <001C60D8A8C9B7CEAE059A374FF590C56AF4669C7B5EF3FB48FB166963
0DC2F65069FD8429D2470C66F59BA4AA7530FFB4ADE3C1D7E80F9EEAD557E5E4
AB916C36BB857A4F594150553BC329EB4A30FFB9FAC49DD9CB72613CE944892B
AEB714A3BB787939F93D6C41904EB7530285731876792F58D159E8C958D4F96C
4A33E2BF6611573AB2F350F35B4DD2F30E73DE54EAA4868F42C1C9DC6E1054D2
939D916F03F1786144B2D9CC207A67C91CE8AC62DC9FE0ADE3F5FD9E215450A7
755BF339B4A3CAE416E72C5C75FDA258A11790ECC50B0CDABEAB9FAB489F3F32
2CF5621A5A5D12490F04D8C4B6C4D38B019E82C2CD07DA8C> |
3047 <001C60D8A8C9B7635685C7C783AA623F54C6494F8C683687871022E068
97E295454BB023EADF1B5E744CB110070C78CECD776476C25152FDC0E758232B
9B4792AFBE681A566E2BCAC5C7FC9D250D7FCB28B479B30C3A6F65A8ECD40A15
1ADC8261DA27DDE087B55CA7906B01F9BE590A93528FB672FF10650D7926A831
9A87D05E1E0D3C2FE4AFF1931895E60345B0C7B337C21ABCB2A3FCB8A73E04A5
44B92598C7B4E77E77BF8FF8789CBDBBF6FDADEDD7F6FD8722FCAF1ADBC29322
22AEC626D3A692B10D> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [8.52 0 0 -8.52 0 0 ]msf
266.913 109.32 mo
(\013\346\013\337\013\342\013\347)
[4.08099 2.99985 5.03964 0 ]xsh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
290.073 106.44 mo
(\()sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
295.113 106.92 mo
(1)sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
304.353 106.92 mo
(\015F)sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
315.993 106.92 mo
(\007M)sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
322.833 106.44 mo
(\))sh
grestore
gsave
73.1129 111.84 mo
403.354 111.84 li
403.354 93.84 li
73.1129 93.84 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
932 <001C60D8A8C9B7917E8A76CC86980DA11E16783E5A6929AD426852A9> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
283.473 106.44 mo
(\003\244)sh
grestore
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
327.873 106.92 mo
( )sh
1.23289 93.84 mo
1.7129 93.84 li
1.7129 93.36 li
1.23289 93.36 li
cp
f
1.71289 93.84 mo
72.6329 93.84 li
72.6329 93.36 li
1.71289 93.36 li
cp
f
72.6329 93.84 mo
73.1129 93.84 li
73.1129 93.36 li
72.6329 93.36 li
cp
f
73.1129 93.84 mo
403.354 93.84 li
403.354 93.36 li
73.1129 93.36 li
cp
f
403.353 93.84 mo
403.833 93.84 li
403.833 93.36 li
403.353 93.36 li
cp
f
1.23289 111.84 mo
1.7129 111.84 li
1.7129 93.84 li
1.23289 93.84 li
cp
f
72.6329 111.84 mo
73.1129 111.84 li
73.1129 93.84 li
72.6329 93.84 li
cp
f
403.353 111.84 mo
403.833 111.84 li
403.833 93.84 li
403.353 93.84 li
cp
f
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBF+Calibri-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B770DA42E3E4596D8EFD7C8E7912558C96795C6DBB3128D062
18AF37A19F75D792B5AECEE44F752B25EBEACB394ECE0EA49058539337EC35E2
79C6ED4B273546FBED2676D5FE022496DFF53B7089864E307D8BA635E34E9FF6
D02542D02030F9FC86C8D09DDDCEF7D5C2EAE554C0182950E173A0511AAA5018
96A8C3AE5677F3D499060D3216DD663502361076E70F4B86159C795A22D04C1A
963872790D663AE876A8F37D2621D7A8E3FBE607C29E326F851161958C23A5A4
7AEBFA702AF02E667BCCA9A2D6A877B61CC687220EE9A09377F471B8> |-
/I <1C60D8A8C9B861542AC637EE43C146C31BD9761A5744ABD275647292EE36
CB498857E20832A31E32228C922B76ED9EB9B45B679D97EE58115E0910D7A678
3C9D74B3C47A3C0DF89E3EE60E2849D5516E05FF3C845F308543415BCC223429
8E4DCADDBC225A62EEFA2E410319810E3AE2C3346BA419C601347FC59380E946
0C65AF6A> |-
/S <1C60D8A8C9B742B2428B22C58173B85783D75A797DBCB372A0CB32648247
4FAB61F063E0140601EC7FF01420397E5BDA67D4F9EDAE8E10230A79EC92A883
0D2282FCE48C14D6255C2ED38A9227193C8E6C63D4DDC56C1677AD4EE7A081BF
7E8A0FF7039F31DB9E38AA3D9C2EB519583088084AA15E2BB9360A4E499CAC66
644008970F6456622973EBC19ABE9CB7A2E2E1E436FF7CFF17A456DD4F34C942
5E8B0FD7DE46D10D79C35ECAF346DB73750038187DFDA7C08FA4F48F7113F63A
FD0A79F7B60ED56D2ECBD0518AE5F6486AECEBC538DAAA88840DE9FD61A7C5CE
810708E5D83B5B7C944D9C1E933328832CB2C1C15FF59A769DC54012A003CD2D
939547D59BB8CA0EDD6EE29AE032391BAF39F38DA1EDFC771E0FCA4EC6DCF952
E839737B2539E516D209F792B48305C6FAB4D747AEC9E9C287FF4145435610A8
CE0D829239E17AD471B7D50F49EAEE2D4789B01FCDAE85BE94E4A248F072817A
DE20C93B792AF7C1262529AB3872BFC67D038B73B9815822C383A38940639918
361A4A73948EE1A93B0DB78FD9D96349705DBB9BAADC27C924FF385CADAA15DB
528408E800871EF0C31C6F3F452B977A4424498006B5AFF12D057DDA48B3582F
ED5A4C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBF+Calibri-Bold /Encoding get
dup 70 /F put
dup 73 /I put
dup 83 /S put
pop
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D /.notdef /F 2{/.notdef}rp /I 
6{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 
/p /q /r /s /t 139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 125.4 mo
(DIFS)
[7.56006 3.23998 5.39999 0 ]xsh
28.7129 125.4 mo
( )sh
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B7D4743405E233890E0A55534F43CA9133B29299791AB3DBBE
2A168EA78A7CB17DB0B060289D007AE138DDD7A874C20C0D1520156DF13FACE4
9220AECA91409AE8B52232B88DA851C2DCC83FF3926F0A798122A50015C04B7E
00C749CF9804781F643848BCD8EE92B57CB757A23284ECD5E56D8CA18327E984
54C09854624F1CB0E6F9646D20C4617F03B71EB8405F3505A5816E6439DF15D9
1294CE077BD16B66305872E9E54213ED4B2F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 18{/.notdef}rp /A 
2{/.notdef}rp /D 11{/.notdef}rp /P 16{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /.notdef /y /z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 125.4 mo
(Distributed interframe spacing)
[7.44006 2.76006 4.56007 4.08008 4.19998 2.64006 6.35992 6.23872 3.96007 6.00003 6.23991 2.75998 
2.76006 6.11992 3.96008 6.00002 4.07999 3.71991 3.95999 5.76004 9.59995 5.87881 2.75998 4.68008 
6.23993 5.76004 5.04007 2.76001 6.35992 0 ]xsh
226.593 125.4 mo
( )sh
1.23289 112.32 mo
1.7129 112.32 li
1.7129 111.84 li
1.23289 111.84 li
cp
f
1.71289 112.32 mo
72.6329 112.32 li
72.6329 111.84 li
1.71289 111.84 li
cp
f
72.6329 112.32 mo
73.1129 112.32 li
73.1129 111.84 li
72.6329 111.84 li
cp
f
73.1129 112.32 mo
403.354 112.32 li
403.354 111.84 li
73.1129 111.84 li
cp
f
403.353 112.32 mo
403.833 112.32 li
403.833 111.84 li
403.353 111.84 li
cp
f
1.23289 130.32 mo
1.7129 130.32 li
1.7129 112.32 li
1.23289 112.32 li
cp
f
72.6329 130.32 mo
73.1129 130.32 li
73.1129 112.32 li
72.6329 112.32 li
cp
f
403.353 130.32 mo
403.833 130.32 li
403.833 112.32 li
403.353 112.32 li
cp
f
1.71289 148.8 mo
6.87289 148.8 li
6.87289 130.8 li
1.71289 130.8 li
cp
.246555 .194827 .195529 0 cmyk
ef
67.4729 148.8 mo
72.6329 148.8 li
72.6329 130.8 li
67.4729 130.8 li
cp
ef
6.87289 148.8 mo
67.4739 148.8 li
67.4739 130.8 li
6.87289 130.8 li
cp
f
.750179 .679652 .670191 .901488 cmyk
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 143.88 mo
(SIFS)
[5.64008 3.23998 5.39999 0 ]xsh
26.7929 143.88 mo
( )sh
73.1129 148.8 mo
78.2729 148.8 li
78.2729 130.8 li
73.1129 130.8 li
cp
.246555 .194827 .195529 0 cmyk
ef
398.193 148.8 mo
403.353 148.8 li
403.353 130.8 li
398.193 130.8 li
cp
ef
78.2729 148.8 mo
398.192 148.8 li
398.192 130.8 li
78.2729 130.8 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B770DA42E8D37F1E32882D4AD6464D850106A0DE7A83B47F0E
C65143E84B8F9887D8EF560BBB7DAED9582F38B6974AE06071D74243DE04377A
9E38C603D44A0AA623BF84EDE575A39EAD4593C4B3F424F5317061A5AEF0FCBD
5198E5F9AB43FD8C228E541FA391BADB0ACDBD5FBBD08EBCA2700B6A1105DB45
395D242F8C44AC433C3725A9D5F6A91B5DF820F4E2F6E66101242BAA426ABA58
4BF91A7E8CBD825612324F28F3BB6B5F4B6A98D5678C5683C423898401C97DB6
AEBB3B08F0E49015B8C09294559F0324646775C30687BA8725A301A8E7ACA559
E180CD1BA525300AD3D8DFA8A8C34309FA6E01CA0BA9F33D60D410C3785C9A35
A4D33DC4DA697FAAF83556B3BAF038631153B21CFA05AC7F6B965B6C9DD580EC
DAA5E19D631487362428CB6C15F8951776CB9C454AE2ECDA7CED1F00599F6057
8050870FD9F672ABB02F7641BFFDFC908D98DE75282B9085EDCE585EED996ACD
325E186C6CC942676730FDB64EACBC2CC9670AC8631DB84FE5F13182767EAE21
F9BC28BA89B244DFD720C9DF35E92F57747BB59E5AF5F4663BAF9B03DC716D74
DBD0D4D1BB2703443369B43A50F5B2916833184106C2158995BEF98CEF08C3DF
5A6182> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 18{/.notdef}rp /A 
2{/.notdef}rp /D 11{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
/z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 143.88 mo
(Short interframe spacing)
[5.51999 6.35994 6.35991 4.19998 3.96008 2.75998 2.76004 6.11993 3.96008 6 4.07999 3.71992 
3.95998 5.76006 9.59995 5.88002 2.75998 4.68008 6.35992 5.76004 5.03885 2.76004 6.35995 0 
]xsh
198.513 143.88 mo
( )sh
1.23289 130.8 mo
1.7129 130.8 li
1.7129 130.319 li
1.23289 130.319 li
cp
f
1.71289 130.8 mo
72.6329 130.8 li
72.6329 130.319 li
1.71289 130.319 li
cp
f
72.6329 130.8 mo
73.1129 130.8 li
73.1129 130.319 li
72.6329 130.319 li
cp
f
73.1129 130.8 mo
403.354 130.8 li
403.354 130.319 li
73.1129 130.319 li
cp
f
403.353 130.8 mo
403.833 130.8 li
403.833 130.319 li
403.353 130.319 li
cp
f
1.23289 148.8 mo
1.7129 148.8 li
1.7129 130.8 li
1.23289 130.8 li
cp
f
72.6329 148.8 mo
73.1129 148.8 li
73.1129 130.8 li
72.6329 130.8 li
cp
f
403.353 148.8 mo
403.833 148.8 li
403.833 130.8 li
403.353 130.8 li
cp
f
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBF+Calibri-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B75378CEF1E0D4E484DFE90099439ACD818CE271F04C07A991
F81A6C58DFC6A4CE349E00814191FB427E7B7BC5AC927F785AD752C35827A101
8CB90075777D8F35DD48B87F6BFCD26360121145FF2A7053654F9CA458A12F06
E1C6D6F29771D1ECFEF87939C0FD81EE93EF6D3EFEFCCE1B2ECF859526D73285
CD3FEAF28A3B7FF4E4397FE5DB6BBC632077F4FBC677F1B83417167D8EF5C2FC
55DD14484C2D373264EF8821724800B2DBC0F536431D14DA4D67A14C68307517
08E890E920FAA2904B8AC67C88D626233781B520872BE22D11CB55FE9A802C81
1127EE022448861A85B00A80AE661E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBF+Calibri-Bold /Encoding get
dup 69 /E put
pop
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D /E /F 2{/.notdef}rp /I 
6{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 
/p /q /r /s /t 139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 162.36 mo
(EIFS)
[5.88008 3.23997 5.4 0 ]xsh
26.9129 162.36 mo
( )sh
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B75378CEF864E8E645E238F010DC67C4EDB2AB6204D0088CBC
DD1DEE9C8C2CECE062788346A01E3802B2091033ED5950E4C033A20CCD093D28
9D2F26A5FD341F46577D4549CD89253F9A6A8D03D896A47E90D75A9B095338D4
F1A428EFD6368B03F3457933B96836318838D6ECFD4EE598A6ACB918E7DEB21F
D5DF405153F50F967DA33761036143519A115970687B392DB7F04F6DFA832832
EFCCEC991D7C99016AF229E38C2C2CB9F54CE4D5FFFF9ABBA880E56F5C9CF0D6
C000EF7BE5CDA2F2ABD168F271B1C1D0D0D56ECDD1C59923F3DD9E4C7BEDD7EE
3581E1726538020B2D60F1F9E52CFA> |-
/x <1C60D8A8C9B76A0D39202D65B3E28787C1CC43B503732F31391DBCE572A2
CA2079F64BC5B594607AA87D000626A2545C2F92C4488974BEE02BFDB5EF846B
F92A6767B071A1575D7917AC4A860992133465690B1A7D35F13489CCB65C68A5
51A50F7D5FE7268F974AE88AF02F0676DC68E49F56F9749803892469EB313C81
6FA79F4E722677598E3E97FE77F7E623BDC63C2F2C92A6A872F78617F1E4F886
E2D0FE3546DBCDFFFA5E4DDD143D076BF94A42BE3EB61D005FC9D628F696E707
AC2730FB246E5D69586A7207A5C66CA927382E61516706448C9FC049414B97AF
ACB4BF470D99F74F500BB6FED6F03C0B03924527D6EBE063E7443300BBFAE73D
541C5D7B5CED7E3DA24F8B93E2A8ABB9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 69 /E put
dup 120 /x put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 18{/.notdef}rp /A 
2{/.notdef}rp /D /E 10{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /x 
/y /z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 162.36 mo
(Extended interframe spacing)
[5.88008 5.15999 3.96007 6.00002 6.35992 6.23993 6.00002 6.35992 2.75998 2.64005 6.23993 3.84009 
6 4.2 3.71991 3.83998 5.76004 9.59998 6 2.75998 4.56009 6.35992 5.64005 5.04004 
2.76004 6.35992 0 ]xsh
217.953 162.36 mo
( )sh
1.23289 149.28 mo
1.7129 149.28 li
1.7129 148.8 li
1.23289 148.8 li
cp
f
1.71289 149.28 mo
72.6329 149.28 li
72.6329 148.8 li
1.71289 148.8 li
cp
f
72.6329 149.28 mo
73.1129 149.28 li
73.1129 148.8 li
72.6329 148.8 li
cp
f
73.1129 149.28 mo
403.354 149.28 li
403.354 148.8 li
73.1129 148.8 li
cp
f
403.353 149.28 mo
403.833 149.28 li
403.833 148.8 li
403.353 148.8 li
cp
f
1.23289 167.28 mo
1.7129 167.28 li
1.7129 149.28 li
1.23289 149.28 li
cp
f
72.6329 167.28 mo
73.1129 167.28 li
73.1129 149.28 li
72.6329 149.28 li
cp
f
403.353 167.28 mo
403.833 167.28 li
403.833 149.28 li
403.353 149.28 li
cp
f
1.71289 185.76 mo
6.87289 185.76 li
6.87289 167.76 li
1.71289 167.76 li
cp
.246555 .194827 .195529 0 cmyk
ef
67.4729 185.76 mo
72.6329 185.76 li
72.6329 167.76 li
67.4729 167.76 li
cp
ef
6.87289 185.76 mo
67.4739 185.76 li
67.4739 167.76 li
6.87289 167.76 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBF+Calibri-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B7DDB68920BA932172B1499148A182E4E0E2EF78DBDBEEC6F5
2E0937C43799EEBB71FF689B6131266A457C81FF30F7FF7EBB30E51863467DCB
D28FE4B4C2B7091BA20F48D775B52AE015A417726578FFFF7D58968E5C957654
43C585F178FD6D4723D9DFE9FEC3370FED8ED508CCCBE152BC072DF4C5CBB932
6B03E214DD8865FCCF7DE5BAAD07E33C38BE3B0335D636FC50CFF6E14700E2A6
60D3C165A16A200BC57B83572B62314C80450F3226D83F7916F54AF40AF7E0FC
E1174C5501685FDA117D5A2044E5CEA0B3948A52353199CC> |-
/C <1C60D8A8C9B78AC3254CB836613B50FEE731C2E5FF280A909853D6AAC757
04A475106F343DA61338D6EE17C81455E5E94E3F2741FBC5A7A55DD147D129E9
9F091EF153D9400A04C295AF15CFE8E5EF897CA1760331E3EC16FF6DDF59CBE4
B8B189FBC000E1020B39AD4C860C477A6DADD3B61FF9666F144B51FA295CD747
BE0B0975C46FB9A64CF31B5B38EC2E16C2393646605BF1D7CFFCC4A2898D2D56
C78772F400DB0DEED21E9AD336A75503A00BDBD615F8BA93E3CAB6C42A285B4A
EA5BF202EF5C37256592BD4040034E3A7EBDD1E055E2381646DDB411A05665A7
BE606403C9AFF5D744DFBFAE5AFB2DC42D9F6BC86ED0962C547BBABC78E279A5
3D52EEA95D4976CD7142776F2988E43A7BE44D2CDF85216C769CE74967C09EA4
8A353B8AE0C3F6529C709DBE56EBBF40E019180A2AC98F4F24B439D8B503726D
C1BB6799D23A36A5761BC46D9B39706FD587C314645EF07556EBA44DDF99582B
6E> |-
/K <1C60D8A8C9B79815F8E797B303BFCF535AF2EB4975308D6803E79621F21A
AD704FD064C72866E1FB7F604B917E5063FA8A30FCD9F17374D2E195C1C2E49F
58AD1B276B6695BD3F7D3FE4E33B47128D91F89264497228BFE22AC59F0E39D0
FEC92823FC801B2007BC2CD5257B40918133F20F63DF6BF9501D5D57EE79A8CF
BB5EF40CF29A8C9A1207C8EC9F03D4B39A9BC98194BFE29FF1752A9A646DBB19
071D8191B8322D42853B579627FB60FEE1F71ACF22E7E2053A22AD62A0C978C0
9991290B0E312DC6671F71A799A85250B78892E2BC84D2B3AE0ED9D4B5EB4A03
2C84B28D996D2A85871289D23285E98612E025164E9C77066BD89908BBA4E088
6DF5419C758B9B62C1EFF8C43FA36CCE48BF98CCB4DC5026E5632121E52C4C22
587B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBF+Calibri-Bold /Encoding get
dup 65 /A put
dup 67 /C put
dup 75 /K put
pop
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /D /E 
/F 2{/.notdef}rp /I /.notdef /K 4{/.notdef}rp /P 2{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp 
/i 3{/.notdef}rp /m /n /o /p /q /r 
/s /t 139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 180.84 mo
(ACK)
[7.20004 6.36008 0 ]xsh
26.9129 180.84 mo
( )sh
73.1129 185.76 mo
78.2729 185.76 li
78.2729 167.76 li
73.1129 167.76 li
cp
.246555 .194827 .195529 0 cmyk
ef
398.193 185.76 mo
403.353 185.76 li
403.353 167.76 li
398.193 167.76 li
cp
ef
78.2729 185.76 mo
398.192 185.76 li
398.192 167.76 li
78.2729 167.76 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B786996D057DD9ECF9C9FE8F34FA37C423F5980BE7D786896E
9EA4586FE497E33F39AB964ACDD89D26E486E7ED8F0DC4FBA51D700DEE7B191A
63C96E17E766A2327A1204635F41F9C49078958E183EEFB6984182E65EDA1F8B
441B6E4AB84D91335816B7734083F4F4FD892A7BCA407D109F62E4EE67EE6C6C
391D2BD510DDC6B5D5CC22D17AC103A7D2131E72C317F3BAC05393ECDC293B2E
CAB1568ADB4263F35E5423335599179483E82F60A5AD75F98D7415F42E948543
DCCF85D6B636864749244B612B22564859487973200635BA3DA904CEFECDBCC8
B01666891D22D161E426CFA4178953236E0C0CC024ABFD25C62F85F4D9DE2FD9
3AA1C37E4CC144A605E56698682CB24FC97AD3BD836F4B14863B5FD90FDACDF5
15F988F6144041EE6DE72D3696AC15A7CD39C4F2A134E2CF9BC30D1C6766E73F
C3D1AD93F0B1FE898AB1ACC306D4BD68327F6E0E6DF2C6B68065348695779B77
D4> |-
/K <1C60D8A8C9B7B3D0EB7806B42229263C492A5DCAC6F1244164F295F5E410
8473A68BA31A10E6F22AB9EF5A9409C157DE2CE2626E4A77235FEEAB98F25141
006AE9C4D1B4E11290268B11ACD649F2BAF3C5397CDDB526BB3A5F414F769243
45024ECADABF989F9B40066B7184C29209EDBEF164C8091E1B5C8273E90CDEBB
300534143408AE764D7FC8C684B944DA4C2DD7320AA192D5C9091A2D19011F97
9A683EF4C872C8750436184FFC81729408ED8902371EA5D99CF979C895977400
7A893C30CD774A51914B58976B511D1370A8ABC9D36F32920DCEF74BF6E20082
784EDA54E5D25C601A69A047A091F63000A36321555F8F6A69EFF7A90EC8C26B
60467577D6168978B6AB0736DD646045844B58D5B9C53EC3B7F19445B4FBC197
93A9> |-
/T <1C60D8A8C9B7544E0B190CCF17AC40FC5FB79E17D90F4D9996E4640AEC72
0DEE3DD9AB43080A2A2747E4FEB9D27010F0C393805606540F888AB7849F19EB
2260FBF5614F1BF356A0D83CA6E9E401826D12829CB1B7D4D1A2437297EAD434
CA7A5112006DA550CD6F8ABF5CB7D09F31273FF39DA8643484195F09918F574C
6BDB08CEC3EACB50E1F97A19618B6DB73370B0F21CA3B501ECD63174F03F4E7B
6D0BF229F39E4FEFE132F59B547C9249B01AC066ABD268352D20498D98E84766
9D322216405EAED7> |-
/q <1C60D8A8C9B78E05EAA3CFED1A062E7358B586AF05164722AD015C8CE0D8
BBE5ADC9B4274EF141088E8BC7A5519CC6F4CF8FAC14716641A1CBFC8A3C1FAE
730ABB73285F00C246C90485D48EE52326159584526EB20CF5ECF3A8F136119D
81E693D06F59FB756016DDA1809F71D795C46C230FC120FDA5AD6FA95AB8E6A4
70F36B3DA70C0CF52D582260ACEF64787A97848A2F116B221416D578037583D7
5EDF07A2E7D2CA285122F15F81D5EF1F5238BE09184291849770C6C0541B16B8
152F87E35B621861DD1ADF706153CA61CF27093B3F644FF3CBAA4800B11C9797
C686E616BE020290A908CE63875BF87479DA09514C9A037DB7C2932C55D8E278
F657B3659B5F0BD547DB1098867E70D8D3DFB6EA9C67031DD259213F55AFA344
4C26C4C5D57542F6262D7A38FB60D8D46EAA97637A896F0308BCCBA5D05A6252
320557ACE8E3075792F0257743ABCB84E60494B1F8AE8FDAF9A4A281D1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 67 /C put
dup 75 /K put
dup 84 /T put
dup 113 /q put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 18{/.notdef}rp /A 
/.notdef /C /D /E 5{/.notdef}rp /K 4{/.notdef}rp /P 
2{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 180.84 mo
(Time required to )
[5.87999 2.76006 9.59995 6.00002 2.63997 4.07999 6.00003 6.23871 6.35992 2.76006 4.07999 5.88002 
6.35992 2.63998 3.96007 6.35991 0 ]xsh
162.511 180.84 mo
(transmit)
[4.08008 3.95999 5.64005 6.35992 4.68008 9.59995 2.64005 0 ]xsh
203.553 180.84 mo
( )sh
206.313 180.84 mo
(the ACK)
[3.96008 6.35992 6 2.75998 6.83994 6.36008 0 ]xsh
244.713 180.84 mo
( )sh
1.23289 167.76 mo
1.7129 167.76 li
1.7129 167.28 li
1.23289 167.28 li
cp
f
1.71289 167.76 mo
72.6329 167.76 li
72.6329 167.28 li
1.71289 167.28 li
cp
f
72.6329 167.76 mo
73.1129 167.76 li
73.1129 167.28 li
72.6329 167.28 li
cp
f
73.1129 167.76 mo
403.354 167.76 li
403.354 167.28 li
73.1129 167.28 li
cp
f
403.353 167.76 mo
403.833 167.76 li
403.833 167.28 li
403.353 167.28 li
cp
f
1.23289 185.76 mo
1.7129 185.76 li
1.7129 167.76 li
1.23289 167.76 li
cp
f
72.6329 185.76 mo
73.1129 185.76 li
73.1129 167.76 li
72.6329 167.76 li
cp
f
403.353 185.76 mo
403.833 185.76 li
403.833 167.76 li
403.353 167.76 li
cp
f
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBF+Calibri-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B8327E958805E8662F53A1A990B9CCB71FCB46624E
3EEF04274C3DAF061F941DA251D48831553D467B545C4CEDC51B9017028716C8
5AD098E09A3C35F11C8F03EE82A4054E32B8BBACDB036019F71B89204547FB39
A4A6D739D6463F68B1144275E15DB1745616C854C02B531B02A4741FE67C594B
E3CE1193E9FE580C9645D3BCBBF3A5276BD064CC24D7CE1543587B9258356EAD
47C591BCCA33BA7700308079D71FAFD9F7BBD1A301FDDF3F5650AF7217E5B885
A3A308ACA9B6BCF33F287BA0E1E22E89D4640A10962E72F3FD> |-
/parenright <1C60D8A8C9B8327E956EFD6F583E438937FAC87F33DC46A0452
6D6E80E2849DBBCC1F7712D20B9271A919C9D9B2E00B79700FC941867FA947C2
84C3802BE0E95A70EEBACCBEC96A56F44B9450C107D71F89C454E931437855A0
3DB86968B1EA8C1D4D47096F611255B03FF5004580609A8DE3BCA48EE46A18BE
9E1809A8482B751FED58945B4AC13F78D1A1E271D871C9EC72400D26E7F64C18
5FB83A2303F6ABF6E27422155572EA49271E93DEA6E7C814186652AE23345084
28505562B1C8AD2B0420417> |-
/N <1C60D8A8C9B6465286D3AF4AAE5E294B4E12FE9A611203414D9F0376D56F
9F8B5CBBD1AA7990D5ED8D45AF92DABA64A6C8F40FF3DCC2EA142CA0C3288A44
5B01D025F18527741E4222F761AD334CB4F5570BE5B7CC50646FD6B628495E18
878FFB554B42F8685072DDD3CF2CC05A84B95C5EBA89EF01CCA8971B2401145A
DB1EDA84150E58120CCD86BC93FB3901CBF8405C949FA19F3F06A0ED5D10F5E7
E2EF6C7FDA992ECDC05B98BCBE15A4501BC8BC016CC48F222C40601CCE7AB543
9AF0B0FE971C8FD168D09D31EACC8F79FBD7D0D849D9541AE53824F48AB812E6
8E490616D41BA3C51EB838716882581F00BE34B5B99967B6138666EA40ADEB60
D63DC3083A097DD9AFD6EE455638DD80EBDC9F12A13A435FDCB2B8D454A2B5D1
53478FBBD6F077692AFBD50E3D729FF10BFA6DC3515710D6DF989575CA613FB5
CA78C3C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBF+Calibri-Bold /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 78 /N put
pop
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /.notdef 
/C /D /E /F 2{/.notdef}rp /I /.notdef /K 
2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /.notdef /e 3{/.notdef}rp /i 3{/.notdef}rp /m 
/n /o /p /q /r /s /t 139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 199.44 mo
(E\(N)
[5.88008 3.71996 0 ]xsh
MSWTBF+Calibri-Bold*1 [8.04 0 0 -8.04 0 0 ]msf
24.3929 201 mo
(c)sh
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
27.7529 199.44 mo
(\))sh
31.4729 199.44 mo
( )sh
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 199.44 mo
(Average number of collisions in a virtual )
[6.71994 5.27995 6.00002 3.95998 5.76006 5.51991 6.00002 2.75996 6.23993 6.35994 9.59995 6.35992 
5.88002 4.19998 2.75999 6.2399 3.71991 2.75998 4.92004 6.3587 2.76007 2.76007 2.76004 4.56009 
2.76004 6.35989 6.35995 4.68008 2.75995 2.64005 6.35995 2.75995 5.76007 2.75995 5.39996 2.76004 
4.07999 4.08008 6.35992 5.64008 2.76004 0 ]xsh
275.551 199.44 mo
(transmission time)
[3.95889 3.96118 5.76004 6.35992 4.68008 9.59995 2.76004 4.56009 4.68008 2.76004 6.35989 6.35995 
2.63998 4.08008 2.76004 9.59995 0 ]xsh
362.313 199.44 mo
( )sh
1.23289 186.24 mo
1.7129 186.24 li
1.7129 185.759 li
1.23289 185.759 li
cp
f
1.71289 186.24 mo
72.6329 186.24 li
72.6329 185.759 li
1.71289 185.759 li
cp
f
72.6329 186.24 mo
73.1129 186.24 li
73.1129 185.759 li
72.6329 185.759 li
cp
f
73.1129 186.24 mo
403.354 186.24 li
403.354 185.759 li
73.1129 185.759 li
cp
f
403.353 186.24 mo
403.833 186.24 li
403.833 185.759 li
403.353 185.759 li
cp
f
1.23289 204.36 mo
1.7129 204.36 li
1.7129 186.24 li
1.23289 186.24 li
cp
f
72.6329 204.36 mo
73.1129 204.36 li
73.1129 186.24 li
72.6329 186.24 li
cp
f
403.353 204.36 mo
403.833 204.36 li
403.833 186.24 li
403.353 186.24 li
cp
f
1.71289 222.84 mo
6.87289 222.84 li
6.87289 204.84 li
1.71289 204.84 li
cp
.246555 .194827 .195529 0 cmyk
ef
67.4729 222.84 mo
72.6329 222.84 li
72.6329 204.84 li
67.4729 204.84 li
cp
ef
6.87289 222.84 mo
67.4739 222.84 li
67.4739 204.84 li
6.87289 204.84 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: QJJAAA+Calibri-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBF+Calibri-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7AC352685EBF0C70CC299C781505881750549B1329E325E48
906D6144E4F2B8FADCE07AE09672A94B6042B3746FEC4270EC99DA196999FD36
B24CF260547D3D85E1C92CEF863DA0F5138E37E3009356FCB5DEC98DF9343267
13DE1955741FD457C6A79D71D77EECD67D7BFD3D3EB12C39414487AF3B4E9613
5DE9D2C5920A006C6765D689980A7C77873CD78C6B4E821034B8E7EED35F6A2E
87E34A17C1BBFC596185D90F9C080897916508E299FCE09F3295EF2CE5720E2B
2D1B9374706152A4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBF+Calibri-Bold /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/MSWTBF+Calibri-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /.notdef 
/C /D /E /F 2{/.notdef}rp /I /.notdef /K 
2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S /T 12{/.notdef}rp 
/a /.notdef /c /.notdef /e 3{/.notdef}rp /i 3{/.notdef}rp 
/m /n /o /p /q /r /s /t 
139{/.notdef}rp]
MSWTBF+Calibri-Bold nf
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 217.92 mo
(E\(T)
[5.88008 3.71996 0 ]xsh
MSWTBF+Calibri-Bold*1 [8.04 0 0 -8.04 0 0 ]msf
22.4729 219.48 mo
(c)sh
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
25.8329 217.92 mo
(\))sh
29.5529 217.92 mo
( )sh
73.1129 222.84 mo
78.2729 222.84 li
78.2729 204.84 li
73.1129 204.84 li
cp
.246555 .194827 .195529 0 cmyk
ef
398.193 222.84 mo
403.353 222.84 li
403.353 204.84 li
398.193 204.84 li
cp
ef
78.2729 222.84 mo
398.192 222.84 li
398.192 204.84 li
78.2729 204.84 li
cp
f
.750179 .679652 .670191 .901488 cmyk
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 217.92 mo
(Average length of a collision period)
[6.71994 5.27995 6.00002 3.95998 5.76006 5.51991 6.00002 2.75996 2.76006 6 6.35994 5.39992 
3.96008 6.35992 2.63997 6.35991 3.71991 2.75998 5.64005 2.75998 4.92007 6.35989 2.76004 2.76007 
2.76007 4.56006 2.76007 6.35989 6.35995 2.63995 6.35873 6.00003 4.19998 2.76004 6.23993 0 
]xsh
249.033 217.92 mo
( )sh
1.23289 204.84 mo
1.7129 204.84 li
1.7129 204.36 li
1.23289 204.36 li
cp
f
1.71289 204.84 mo
72.6329 204.84 li
72.6329 204.36 li
1.71289 204.36 li
cp
f
72.6329 204.84 mo
73.1129 204.84 li
73.1129 204.36 li
72.6329 204.36 li
cp
f
73.1129 204.84 mo
403.354 204.84 li
403.354 204.36 li
73.1129 204.36 li
cp
f
403.353 204.84 mo
403.833 204.84 li
403.833 204.36 li
403.353 204.36 li
cp
f
1.23289 222.84 mo
1.7129 222.84 li
1.7129 204.84 li
1.23289 204.84 li
cp
f
72.6329 222.84 mo
73.1129 222.84 li
73.1129 204.84 li
72.6329 204.84 li
cp
f
403.353 222.84 mo
403.833 222.84 li
403.833 204.84 li
403.353 204.84 li
cp
f
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 236.4 mo
(E\(I\))
[5.88008 3.71996 3.23998 0 ]xsh
23.4329 236.4 mo
( )sh
gsave
73.1129 259.32 mo
403.354 259.32 li
403.354 223.32 li
73.1129 223.32 li
cp
clp
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 236.4 mo
(Average number of consecutive idle slots before a successful )
[6.71994 5.27995 6.00002 3.95998 5.76006 5.51991 6.00002 5.99997 6.23993 6.35992 9.59875 6.23993 
6 4.07999 5.99997 6.35992 3.59991 6 4.92004 6.2399 6.35995 4.68005 6 5.04004 
6.35995 4.08008 2.76004 5.27997 5.88 5.99997 2.64005 6.35992 2.76007 5.88 5.99997 4.68008 
2.76004 6.35992 4.08005 4.56009 5.99997 6.35992 5.76001 3.35992 6.35992 4.07999 5.88 6 
5.76001 6 4.56006 6.35992 5.04004 5.04007 5.99881 4.68008 4.56009 3.71988 6.35992 2.64005 
0 ]xsh
grestore
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 254.4 mo
(transmission or a collision)
[4.08008 3.95999 5.76004 6.35992 4.68008 9.59995 2.76006 4.67888 4.68007 2.76006 6.23991 6.35992 
2.75998 6.23991 4.19998 2.75998 5.76004 2.75998 4.91885 6.35989 2.76007 2.76007 2.76004 4.68008 
2.64001 6.23993 0 ]xsh
204.153 254.4 mo
( )sh
1.23289 223.32 mo
1.7129 223.32 li
1.7129 222.839 li
1.23289 222.839 li
cp
f
1.71289 223.32 mo
72.6329 223.32 li
72.6329 222.839 li
1.71289 222.839 li
cp
f
72.6329 223.32 mo
73.1129 223.32 li
73.1129 222.839 li
72.6329 222.839 li
cp
f
73.1129 223.32 mo
403.354 223.32 li
403.354 222.839 li
73.1129 222.839 li
cp
f
403.353 223.32 mo
403.833 223.32 li
403.833 222.839 li
403.353 222.839 li
cp
f
1.23289 259.32 mo
1.7129 259.32 li
1.7129 223.32 li
1.23289 223.32 li
cp
f
72.6329 259.32 mo
73.1129 259.32 li
73.1129 223.32 li
72.6329 223.32 li
cp
f
403.353 259.32 mo
403.833 259.32 li
403.833 223.32 li
403.353 223.32 li
cp
f
1.71289 277.8 mo
6.87289 277.8 li
6.87289 259.8 li
1.71289 259.8 li
cp
.246555 .194827 .195529 0 cmyk
ef
67.4729 277.8 mo
72.6329 277.8 li
72.6329 259.8 li
67.4729 259.8 li
cp
ef
1.71289 295.8 mo
72.6329 295.8 li
72.6329 277.8 li
1.71289 277.8 li
cp
ef
6.87289 277.8 mo
67.4739 277.8 li
67.4739 259.8 li
6.87289 259.8 li
cp
f
.750179 .679652 .670191 .901488 cmyk
MSWTBF+Calibri-Bold*1 [12 0 0 -12 0 0 ]msf
6.87289 272.88 mo
(E\(S\))
[5.88008 3.71996 5.64008 0 ]xsh
25.8329 272.88 mo
( )sh
73.1129 295.8 mo
78.2729 295.8 li
78.2729 259.8 li
73.1129 259.8 li
cp
.246555 .194827 .195529 0 cmyk
ef
398.193 295.8 mo
403.353 295.8 li
403.353 259.8 li
398.193 259.8 li
cp
ef
78.2729 277.8 mo
398.192 277.8 li
398.192 259.8 li
78.2729 259.8 li
cp
f
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B83D5FF27DA8D8E6046A27BA23CC1486AB72A59E47
AACC8161CC74CDD95CC2A654D5856D60A8DC5F8C184EC1ABC4D1D2160575FE6D
70949B41A6CABCFACD73360CFC5DA53716AD56E7BCBA30E5CBADDBCE536F92B4
EFC10AF93D5AA400F7912003F9E093421F683C28EAAC53C2248A1C92A4ADDC6F
6F189A13C295B6CA124F9A4CA4E40FBBF41FDD3287A0301EBE9D805D7A4030F8
18C18B05D8592B2DBF59F7F26BA45EDE7B24A816E6CC3105B053A64C91913E22
DD3F66D2B695F53F3F722E2F8096827FF689C16601C625CCC1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft 3{/.notdef}rp /comma /.notdef /period 
18{/.notdef}rp /A /.notdef /C /D /E 5{/.notdef}rp /K 
4{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 272.88 mo
(Time required to complete a successful transmission \(including all )
[5.87999 2.76006 9.59995 6.00002 2.75998 4.07999 5.88002 6.35992 6.35992 2.75885 3.95998 6.00002 
6.23993 2.87997 3.84009 6.35989 2.87997 4.92004 6.35992 9.47995 6.35992 2.76004 5.76004 3.96008 
5.88 2.87997 5.76004 2.87997 4.5589 6.35992 5.04004 5.04004 6 4.68008 4.56009 3.71991 
6.35992 2.64008 2.87997 4.08005 3.96002 5.64001 6.35992 4.68008 9.59995 2.76004 4.68008 4.67889 
2.64001 6.35992 6.35992 2.87997 3.59991 2.64005 6.35989 5.04007 2.76004 6.35992 6.35989 2.64005 
6.35992 5.63992 2.75998 5.76001 2.76007 2.76001 0 ]xsh
grestore
78.2729 295.8 mo
398.192 295.8 li
398.192 277.8 li
78.2729 277.8 li
cp
f
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBE+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B83D5FF29F44B652980D05B9EE187D926BB2CE034
E7CDFB42233F20EA0B6A7D3053EB0C035C6C189F4DA6B49B40A0EB0636B7ACA2
CF42792FC2164693E9F6F7B6636D9708884EE48CE23B1AFB94FA912772ABED4A
B22E20E0410244F282681ABF0BF3F1FF921D275AD5C6D7F8F439D5D0B2BAD1CB
D8078F961EB6B7FB4BFFE77692BCE19880B8A84987A61F63B3F03252C231FCBB
5CB61DBA6789BB581DA0ED1802F2C6AAE0EF2092080B688E21E45FC07A90B21E
AB8701889CC58EAA06C962B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBE+Calibri /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/MSWTBE+Calibri*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period 18{/.notdef}rp /A /.notdef /C /D /E 5{/.notdef}rp 
/K 4{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /q 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
MSWTBE+Calibri nf
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
78.2729 290.88 mo
(the protocol )
[4.08008 6.35992 5.88002 2.75996 6.35994 3.95998 6.23993 3.96008 6.35991 4.92004 6.35872 2.76125 
0 ]xsh
140.913 290.88 mo
(overheads)
[6.35991 5.27995 6.00002 4.19998 6.23993 6.00003 5.76004 6.35992 0 ]xsh
191.793 290.88 mo
(\), i.e., )
[3.59991 3 2.63998 2.76004 3 6 3 2.99881 0 ]xsh
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B7FCB6E2A0BBD18F0428B9066E13F8178D63660CB620B06F62
8F5596478BABA744D0C989E7CD7129C7A53CF9C06F9E080B0D044618CF2547AA
03C9E9B22423CDD77534E35A46D7309690F001419ECEDAD27E4328D0C913D7FF
11EDF2E6C5117A498B6C2F1A62CB51E2F6AB66693EDB4E7066D83CF8DBE9100D
2F4BDFD215DB4A15213B5F268F7C7A33D318D9583FA9062B5DA9258AC5FD3C40
574B0C7C15AEAB79142B2F13C5B77C993B367A19B22B7AB8531C38EDF2E0DED3
8242B54458D39C971971E7B0E16F40515A68027F555C28963ED9C6B03A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 69 /E put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 11{/.notdef}rp 
/equal 7{/.notdef}rp /E 10{/.notdef}rp /P 16{/.notdef}rp /a /.notdef 
/c /.notdef /e /.notdef /g /h /i /.notdef 
/k /l /.notdef /n /o /p /.notdef /r 
/s /t 6{/.notdef}rp /braceleft /.notdef /braceright 130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
224.793 290.88 mo
(E)sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
231.753 290.4 mo
(\()sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7AB67579FD9C6A1C536E33A58A7E472E2F62CA99D88B94F30
D3CBD31778CF94ED8AF04F5AB0CC9BA5A44DE6B0940F1268E5878604981C6769
51F40453907B50BD1D8AF6BC330BD115AEAADA2D714CC3B04B3442952CE5A4F7
B9664A7A204467F5ADD8A19D87671CE4D45E37D26494A11C2A391205B168E23C
526378D4C26445EE23D1620B47082315FAA13CBC1E01D531354410B5CAF11C75
8DE7EDB9D6C4E2BC65761DE948E8E39D1867C94ADBE90043DAD10339B219C1C3
CBC1C9F7567837F75828B95899ACBB2EF9786559FEA5F229AE2E08CD0788BA90
FD767F31EC7EC5C063051AAA1DC5EC0CC6BC80AEE0C22445295504DEDF2379> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 11{/.notdef}rp 
/equal 7{/.notdef}rp /E 10{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e /.notdef /g /h 
/i /.notdef /k /l /.notdef /n /o /p 
/.notdef /r /s /t 6{/.notdef}rp /braceleft /.notdef /braceright 
130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
236.793 290.88 mo
(S)sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
242.793 290.4 mo
(\))sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
250.953 290.88 mo
(=)sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
263.193 290.88 mo
(\007I)sh
grestore
263.193 283.08 mo
273.513 283.08 li
273.513 282.239 li
263.193 282.239 li
cp
f
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
%ADOBeginSubsetFont: GFNBAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
MSWTBG+CambriaMath dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B61E1368B22F78F4F884FBE369EF98C5E46545E5E8322B2
7E1BD52AE9FC006DB1F202A210F9D65> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MSWTBG+CambriaMath /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/MSWTBG+CambriaMath*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus 5{/.notdef}rp 
/one 11{/.notdef}rp /equal 7{/.notdef}rp /E 10{/.notdef}rp /P 2{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef 
/g /h /i /.notdef /k /l /.notdef /n 
/o /p /.notdef /r /s /t 6{/.notdef}rp /braceleft 
/.notdef /braceright 130{/.notdef}rp]
MSWTBG+CambriaMath nf
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
276.153 290.88 mo
(+)sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 3 GetGlyphDirectory
1845 <001C60D8A8C9B78AC36D27CB2CBDB650FB70B318EE4E9F756B2BB49FAD
C6FA38EEDB0175716757E182234A85474AC6C2DB37C1B8CB0A1240C8DE27D39B
AAF06612FFBEEA48E1136300EC961E3E3C3F38BD50839D52F07BE6F2E3ED7228
0283F98831ED461FF369B5C99BDBDC846A37162455EB1C2EAECD35E1324E294A
D9D9BE6749CC4747FEA3B7E8AB6960DFA574098591AF56EE9134D46F48D9AFD6
96FBAB84A9174F8CA36397C649F589E7E4610BF2E2FE7F5AEE83CB9D415C394A
E3A0E153C20F04057570873C1C674363C4BA7315BD2C4A467ED8C231C98A2E0A
0D7F2208169A00BABEBA2C04E432E2E60BF1D52E10> |
1835 <001C60D8A8C9B7205851295BEBAF09CDFE447E7A63512D470C715BBD55
1700BBABB2813D68250E84450B6945471CB07B094E4C80582904C361B9B4F9CA
213BF441DD4E3189C96A8BDC133C786BCF883CF62AF12B0F7C21F9D65D954D37
79BEA97DBBF675FF454E72D9114F7F484A3E8D0AA81ADCA7BA1A307F77198530
3765DEFA8E8567AE0F0EBA25E5BF77807772> |
1832 <001C60D8A8C9B7D8BE165EB9188076350D6B6D8C66564AC612B5F90886
51ACF43226830BB9B4ECA195FDE36B1D278D9A1BBEB72EC670736159991DB380
8E3DC6A44D3C42E97F84DA910072FED35F9508E46D99D7680D965373B3EEEE0F
CD020F67A4ED38D28D7418CEB097789883823D92596ABDBCEE2283F2CE8C0A41
48A95E5C6D8F6259F1706D7D7D17E3DD764A2E5BFA4470D76E29C8802FD443BC
536A84F97A2D11F39188986325BF3CC27606B049F81FE024A27006BCDF7E0D7E
5EA6CF7ED8A8BD6AE8CFE302429B2DF1BD5C> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
287.793 290.88 mo
(\0075\007+\007\(\0075)
[6.36017 4.56006 7.31982 0 ]xsh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
315.273 290.88 mo
(+)sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 3 GetGlyphDirectory
1827 <001C60D8A8C9B66C0E6DD67DAD30FE5ADDE8E77400E963927E1FBBB528
D031D2D16818D37D07E7F9BD5A1361EEB6C0C455005133AEEAE6CF39FFB7C14C
78807C3E36B55B57C346AF00362FDD79EEBF310E0C44CAB9807711C9F5F3734A
ADB374F2C65A487AF5FA31A2A723C2741B0246F28968731B816D9245611919D0
AA5CB7C8B3885450479331ECCD4492CCD662584A914DB092CA48AF0AA5EBB389
8A3BC861> |
1829 <001C60D8A8C9B7C63DF8CAD7A86802D85F90DEE581EAE569C7C23ED254
E5A4121B602029562724248FC0F1AAB6C1595E74DA46013B2FB971448308B7C1
5E79C147448F705C3DF8D36EFDE0DB532DBA51FA4A7FBA98948E2601A12E5E20
D39E1DC1247DFB1C920A6E4B06965189E9394CFB25FCFC31AF880277EE5DB8F0
C4B4AD8B78CDCC26ABCEAC6ABDA557D88786C3AD2C4A4DC64E033D961FE676E6
CAA20FBF> |
1837 <001C60D8A8C9B62FDE75DF744BE36C6990529AFC313DA4E341874C93ED
FF8DDE7F92E9F5BE879329F42090D6F5B9658555A40E8F54C9C9FF40500AA93D
110538FC80CF3ADB4E4702A885AF22E6EB03DB195A4C7FF5C4B70E758935ACDF
862F66A4EE605320629B9056C394C662F72E2D9D0CB29D904B9D0ACA68F75F0B
F1360EFAEF05F0F8C4F282A5CF12EF7EA095EE9833D3031C1462DA01DB595C8B
1D675A26854CED5C6502B3D409FC7B425C87072C9EC8205E115A586F2C2C3EBA
ADEEAA772ED30EA4F0AF386602F79FE11A8CEC546D53D3AC0DB09A54805A55CB
01CE10EB9E1E36AD4ED1423818D7AFC464EE45F501EFD373240298B97389ED5A
451DB4931EF9E88B5B5085239E020C81ADA7FB627F44D9ABD75346773EFC76DD
805C9C58F89F8997C80A91BED60ECF362920D9C99EB25954749BFD3E9FBA> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
326.913 290.88 mo
(\007#\007%\007-)
[7.55988 7.20007 0 ]xsh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
MSWTBG+CambriaMath*1 [12 0 0 -12 0 0 ]msf
353.073 290.88 mo
(+)sh
grestore
gsave
73.1129 295.8 mo
403.354 295.8 li
403.354 259.8 li
73.1129 259.8 li
cp
clp
%ADOBeginSubsetFont: HJCBAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+CambriaMath 1 GetGlyphDirectory
1830 <001C60D8A8C9B629F1C1FB87FD08B61D19E4A24214057CB0CBEC658F78
F0F43EF4A18E0EE93EC63E0CEFB62F0C3979CC12DCF17E23B271F7F3D06C2ED3
1E45E80053B0E25F04D7ABD3A5736333C8B86FA36F3254147E7CBE5D4925B143
CE96DA0367662ED441ECA537EF39439740B2BAB788EFA5139957BE972EFEE475
A9E55C907D3FDC9CF2498105AB1879F8AB59106128E7122840FAC30AF01F547D
BD5674197C9408C371A05CE9441778B365C485F26B46AF6415E1E946AFADE5E8
369BD48F65B7995F102ADAF2F650333555CCEF> |
!
end
end end
%ADOEndSubsetFont
MSWTBH+CambriaMath [12 0 0 -12 0 0 ]msf
364.713 290.88 mo
(\007&\007+\007\(\0075)
[8.28003 4.56006 7.31982 0 ]xsh
grestore
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
391.473 290.88 mo
( )sh
1.23289 259.8 mo
1.7129 259.8 li
1.7129 259.32 li
1.23289 259.32 li
cp
f
1.71289 259.8 mo
72.6329 259.8 li
72.6329 259.32 li
1.71289 259.32 li
cp
f
72.6329 259.8 mo
73.1129 259.8 li
73.1129 259.32 li
72.6329 259.32 li
cp
f
73.1129 259.8 mo
403.354 259.8 li
403.354 259.32 li
73.1129 259.32 li
cp
f
403.353 259.8 mo
403.833 259.8 li
403.833 259.32 li
403.353 259.32 li
cp
f
1.23289 295.8 mo
1.7129 295.8 li
1.7129 259.8 li
1.23289 259.8 li
cp
f
1.23289 296.28 mo
1.7129 296.28 li
1.7129 295.8 li
1.23289 295.8 li
cp
f
1.23289 296.28 mo
1.7129 296.28 li
1.7129 295.8 li
1.23289 295.8 li
cp
f
1.71289 296.28 mo
72.6329 296.28 li
72.6329 295.8 li
1.71289 295.8 li
cp
f
72.6329 295.8 mo
73.1129 295.8 li
73.1129 259.8 li
72.6329 259.8 li
cp
f
72.6329 296.28 mo
73.1129 296.28 li
73.1129 295.8 li
72.6329 295.8 li
cp
f
73.1129 296.28 mo
403.354 296.28 li
403.354 295.8 li
73.1129 295.8 li
cp
f
403.353 295.8 mo
403.833 295.8 li
403.833 259.8 li
403.353 259.8 li
cp
f
403.353 296.28 mo
403.833 296.28 li
403.833 295.8 li
403.353 295.8 li
cp
f
403.353 296.28 mo
403.833 296.28 li
403.833 295.8 li
403.353 295.8 li
cp
f
MSWTBE+Calibri*1 [12 0 0 -12 0 0 ]msf
-5.12711 309.36 mo
( )sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/MSWTBF+Calibri-Bold*1 uf
/MSWTBF+Calibri-Bold uf
/QJJAAA+Calibri-Bold uf
/MSWTBH+CambriaMath-Identity-H uf
/MSWTBH+CambriaMath /CIDFont ur
/MSWTBG+CambriaMath*1 uf
/MSWTBG+CambriaMath uf
/GFNBAA+CambriaMath uf
/MSWTBE+Calibri*1 uf
/MSWTBE+Calibri uf
/HIBBAA+Calibri uf
/MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H-Identity-H uf
/MSWTBC+DFKaiShu-SB-Estd-BF-ETen-B5-H /CIDFont ur
/MSWTBD+TimesNewRomanPSMT*1 uf
/MSWTBD+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
